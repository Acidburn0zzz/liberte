#!/bin/bash -pe

# This script should be safe to run via sudo
# (with env_reset and secure_path set)

export LC_ALL=C


# Get OTFEVOLUME (everything else is deduced)
source /etc/conf.d/liberte

# Mirrors /etc/init.d/liberte
luser=anon
lmount=/home/${luser}/persist

# Mounting and unmounting the filesystem
umount_fs() {
    # Unmount the filesystem if it's mounted
    unmount=0
    if mountpoint -q ${lmount}; then
        echo "Unmounting ${lmount}"
        umount ${lmount}
        unmount=1
    else
        echo "${lmount} is not mounted"
    fi
}

mount_fs() {
    # Mount the filesystem if it was previously unmounted
    if [ ${unmount} = 1 ]; then
        echo "Re-mounting ${lmount}"
        mount ${lmount}
    else
        echo "${lmount} was not previously mounted"
    fi
}


# Accept only single parameter
if [ $# != 1 ]; then
    cat<<EOF
Format: sudo otfe-resize info
        sudo otfe-resize <new size in MiB (an integer)>

The OTFE volume resize process should be safe.
In case anything fails (e.g., insufficient disk space, or busy device
during unmount), just fix the problem and retry. No single step depends
on subsequent steps to succeed.

The OTFE header is unaffected by the resize, so any existing header
backup is still valid.

WARNING: Disconnect all network interfaces before running otfe-resize
         in order to avoid losing cables received during the process.
EOF
    exit 1
fi


# Retrieve devices stack
otfe=`cryptsetup status ${OTFEVOLUME} | head -n 1 | awk '{ print $1 }'`
loop=`cryptsetup status ${OTFEVOLUME} | awk '/^[[:blank:]]*device:/ { print $2 }'`
file=`losetup "${loop}" | cut -d' ' -f3 | sed 's/^(//; s/)$//'`

otfeoffset=`cryptsetup status ${OTFEVOLUME} | awk '/^[[:blank:]]*offset:.* sectors/ { print $2 }'`
otfesize=`cryptsetup status ${OTFEVOLUME} | awk '/^[[:blank:]]*size:.* sectors/ { print $2 }'`


# Sanity checks
if [ ! -b "${otfe}"  -o  ! -b "${loop}"  -o  ! -f "${file}" \
     -o  "`dirname "${otfe}"`" != /dev/mapper ]; then
    echo "Sanity checks failed: ${otfe}, ${loop}, ${file}"
    exit 1
fi


# Ensure that new size is bigger
oldsize=`du -b "${file}" | cut -f1`


# More sanity checks
# Minimum is (1M + 512B) for NTFS, and (1M + 8K) for OTFE
if [ ${oldsize} -lt $[2*1024*1024 + 512 + 8*1024] ]; then
    echo "Sanity check failed: ${file} is too small"
    exit 1
fi

# Check that OTFE offset+size add up (assume 512B sectors)
# This also ensures that OTFE file size is a multiple of 512
if [ ${oldsize} -ne $[ (${otfeoffset} + ${otfesize}) * 512 ] ]; then
    echo "Sanity check failed: [${OTFEVOLUME}] size and offset don't match size of ${file}"
    exit 1
fi


# Provide information if requested
if [ X"$1" = Xinfo ]; then
    cat <<EOF
OTFE LVM identifier:    ${OTFEVOLUME}
OTFE logical device:    ${otfe}
Container loop device:  ${loop}
Container file:         ${file}
File size:              ${oldsize}
File size (rounded up): $[ (${oldsize} + 1024*1024-1) / (1024*1024) ] MiB
EOF
    exit
fi


# Check that the parameter is not too long
if [ ${#size} -gt 12 ]; then
    echo "Parameter is too long"
    exit 1
fi


# Sanitize the parameter and discard the original
size=`echo x "$1" | tr -cd '[:digit:]'`
shift


# Check that the parameter has digits
if [ -z "${size}" ]; then
    echo "Sanitized parameter is empty"
    exit 1
fi


# See the calculation above for the minimum possible size
if [ ${size} -lt 3 ]; then
    echo "Minimum supported size is 3 MiB"
    exit 1
fi
size=$[ ${size} * 1024 * 1024 ]


# Running either in growth or in shrink mode
if [ ${size} -ge ${oldsize} ]; then

    # Same-size run is useful as a sanity check
    if [ ${size} -eq ${oldsize} ]; then
        echo "No size change, running in growth mode anyway"
    fi


    # The filesystem can be unmounted just prior to
    # NTFS resize, but there is no point in growing
    # the file and the OTFE volume if umount fails
    umount_fs


    # Increase OTFE file size
    echo "Growing ${file} to ${size} bytes"
    if ! truncate -s ${size} "${file}"; then
        echo "Restoring the original size of ${file}"
        truncate -s ${oldsize} "${file}"
        mount_fs
        exit 1
    fi


    # Make loop device aware of the file resize
    echo "Notifying ${loop} of the new size"
    losetup -c "${loop}"


    # Resize the OTFE volume according to loop device size
    echo "Growing the [${OTFEVOLUME}] volume"
    cryptsetup resize ${OTFEVOLUME}


    # Resize the NTFS filesystem on encrypted volume
    echo "Growing the NTFS filesystem on ${otfe}"
    echo y | ntfsresize -f -P "${otfe}"
    mount_fs

else

    sizediff=$[ ${oldsize} - ${size} ]

    # Resize the NTFS filesystem on encrypted volume
    # (assuming 512B sectors - see sanity checks above)
    umount_fs
    echo "Shrinking the NTFS filesystem on ${otfe}"
    if ! echo y | ntfsresize -f -P -s $[ ${otfesize}*512 - ${sizediff} ] "${otfe}"; then
        echo "NTFS shrinking failed, attempting remount"
        mount_fs
        exit 1
    fi
    mount_fs


    # Resize the OTFE volume according to loop device size
    # (assuming 512B sectors - see sanity checks above)
    echo "Shrinking the [${OTFEVOLUME}] volume"
    cryptsetup -b $[ ${otfesize} - ${sizediff}/512 ] resize ${OTFEVOLUME}


    # Decrease OTFE file size
    echo "Shrinking ${file} to ${size} bytes"
    truncate -s ${size} "${file}"


    # Make loop device aware of the file resize
    echo "Notifying ${loop} of the new size"
    losetup -c "${loop}"

fi


echo "Done"
