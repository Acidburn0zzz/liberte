#!/bin/sh -e

# This script is executed with root privileges,
# so be careful with externally supplied files.

export LC_ALL=C


# inotify timeout handles race conditions
# NOTE: overlayfs (v13) has no file-level inotify support,
#       but directory-level events work, which is enough for
#       Tor, which writes and renames temporary files
inotifytimeout=15
dirwait=15

tordir=/var/lib/tor/data
consensus=${tordir}/cached-microdesc-consensus
uvconsensus=${tordir}/unverified-microdesc-consensus
descriptors=${tordir}/cached-microdescs.new

tag=tordate
datere='[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]'


# ${tordir} must exist for inotifywaits below
while [ ! -e ${tordir} ]; do
    sleep ${dirwait}
done


# Delegate time setting to other daemons if Tor connections work
if [ -e ${descriptors} ]; then
    logger -p 6 -t ${tag} "Tor has already opened a circuit"
else

    # Wait for the consensus file, which contains a valid time interval
    while ! grep -qs "^valid-until ${datere}"'$' ${consensus} ${uvconsensus}; do
        inotifywait -qq -t ${inotifytimeout} -e close_write -e moved_to ${tordir} || :
    done

    # Use unverified consensus if possible (when time is far off into future, or when
    # it wasn't removed yet), but work with a hardlink to prevent removal in-process
    if [ ! -e ${consensus} ]  &&  ln -fT ${uvconsensus} ${uvconsensus}.bak 2>/dev/null; then
        logger -p 6 -t ${tag} "Using unverified Tor consensus"
        consensus=${uvconsensus}.bak
    else
        while ! grep -qs "^valid-until ${datere}"'$' ${consensus}; do
            inotifywait -qq -t ${inotifytimeout} -e close_write -e moved_to ${tordir} || :
        done
    fi


    # Get various date points in Tor's format, and do some sanity checks
    vstart=`sed -n "/^valid-after \(${datere}\)"'$/s//\1/p; t q; b; :q q' ${consensus}`
    vend=`sed -n "/^valid-until \(${datere}\)"'$/s//\1/p; t q; b; :q q' ${consensus}`
    vendchk=`date -ud "${vstart} -0300" +'%F %T'`

    rm -f ${uvconsensus}.bak

    if [ x"${vstart}" = x  -o  x"${vend}" = x  -o  x"${vend}" != x"${vendchk}" ]; then
        logger -p 3 -t ${tag} "Unexpected valid-until: [${vend}] is not [${vendchk}]"
    else

        # Check whether current time is in (conservative) range
        curdate=`date -u +'%F %T'`
        vendcons=`date -ud "${vstart} -0230" +'%F %T'`

        order="${vstart}
${curdate}
${vendcons}"
        ordersrt=`echo "${order}" | sort`

        if [ "${order}" = "${ordersrt}" ]; then
            logger -p 6 -t ${tag} "Current time is in valid Tor range"
        else

            # Estimate time to the middle of the range
            vmid=`date -ud "${vstart} -0130" +'%F %T'`
            logger -p 6 -t ${tag} "Setting time to middle of valid Tor range: [${vmid}]"
            date -us "${vmid}" 1>/dev/null


            # Tor is unreliable with picking a circuit after time change
            if /etc/init.d/tor -q status; then
                logger -p 6 -t ${tag} "Restarting Tor service"
                /etc/init.d/tor -qs restart
            fi

        fi

    fi

fi


# Prevent error message when stopping the service (#380073)
/etc/init.d/tordate -qs zap
