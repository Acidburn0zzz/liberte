#!/bin/sh -e

if [ "`id -u`" != 0 ]; then
    echo "Please run this program as root:"
    echo "Logout immediately after boot and press Alt-F2."
    exit 1
fi


if ! /usr/bin/test -w .; then
    echo "Please cd to a writable directory."
    echo "E.g.: cd /mnt/boot"
    exit 1
fi


# Save files in a temporary directory
rep="`pwd`/bug-report.tar.xz"
dir=`mktemp -d`
cd "${dir}"


# Allow errors from now on
set +e
exec 2> errors


# Load modules for x86info / lsmsr
modprobe -b cpuid
modprobe -b msr


# Build the report
echo Version ...
cp /etc/issue                          00-issue

echo Architecture ...
x86info -a                           > 01-x86
sudo -n -u nobody x86info -a         > 01-x86-npriv
lsmsr -a -V 4                        > 01-msr
cp /proc/cpuinfo                       02-cpu
cpufreq-info                         > 02-cpu-freq

echo System ...
biosdecode                           > 03-bios
dmidecode                            > 03-dmi
vpddecode                            > 03-vpd
sensors                              > 03-sensor

# Apparently, only lspci -xxxx encodes serial numbers
echo Hardware ...
lsmod                                > 04-mod
lspci -vvvxxxDnn -A linux-sysfs      > 05-pci
lsusb -v                             > 05-usb
lsscsi -dgpLv                        > 06-scsi-dev
lsscsi -HLv                          > 06-scsi-host
lsscsi -HLtv                         > 06-scsi-top
lspcmcia                             > 07-pcmcia
pkcs11-tool --module opensc-pkcs11.so -Lv > 07-pcsc

echo Network ...
ifconfig -a -v                       > 08-net-eth
(iwconfig; iwpriv)                   > 08-net-wifi
rfkill list                          > 08-net-rfkill
hciconfig -a                         > 08-net-hci
route -vne                           > 08-net-route

echo Sound ...
alsa-info --no-dialog --with-aplay --with-amixer --with-alsactl --with-devices \
          --with-dmesg --no-upload --output 09-alsa 1>/dev/null

echo Disks ...
lsblk -t                             > 10-blk
cp /proc/mounts                        10-mnt
cp /var/run/auto.media                 10-autos


for dev in `find /dev/disk/by-id ! -name '*-part[0-9]*' -xtype b -exec readlink -f {} \; | sort -u`; do
    hdparm -iI   "${dev}"            > 11-ide-`basename "${dev}"`
    # NOTE: may hang on USB key
    # sdparm -a    "${dev}"            > 11-scsi-`basename "${dev}"`
done
for dev in `smartctl --scan | grep -v '^#' | cut -d' ' -f1`; do
    smartctl -ax "${dev}"            > 11-smart-`basename "${dev}"`
done

echo System logs ...
cp /var/log/rc.log                     12-rc.log
dmesg -r                             > 13-dmesg
for log in /var/log/everything/*; do
    cp "${log}"                        14-"`basename "${log}"`"
done

echo X System logs ...
cp /etc/X11/xorg.conf                  15-xorg.conf
cp /etc/X11/xorg.conf.new              15-xorg.conf.new
cp /var/log/Xorg.0.log                 15-xorg.log
cp /var/log/Xorg.0.log.old             15-xorg-prev.log
cp /tmp/.private/anon/xsession.log     16-xsession.log
cp /tmp/.private/anon/xsession.log.old 16-xsession-prev.log


# Make errors fatal again
set -e
exec 2>&1


# Sanitize hardware-identifying info
# NOTE: must be updated once IPv6 is enabled
echo Sanitizing ...
sed -ri 's/\<(Serial Number:?[[:blank:]]+|SerialNo=)[^[:blank:]].+/\1[SN REMOVED]/ig' *
sed -ri 's/\<((iSerial[[:blank:]]+[[:digit:]]+|SerialNumber:)[[:blank:]]+)[^[:blank:]:]+$/\1[SN REMOVED]/i' *
sed -ri 's/\<(UUID:[[:blank:]]+)[^[:blank:]].+/\1[UUID REMOVED]/ig' *

sed -ri 's/\<version:?[[:blank:]]+[[:digit:].]+\>/&/; t; s/\<(0|127|255)\.(0|255)\.(0|255)\./ipMaGiK&/g; s/\<([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}\>/[IP REMOVED]/ig; s/ipMaGiK//g' *
sed -ri 's/\<([[:xdigit:]]{2}:){5,}[[:xdigit:]]{2}\>/[MAC REMOVED]/ig' *
sed -ri "s/\<(domain name) '[^']*'/\1 '[DN REMOVED]'/ig" *

sed -ri 's/\<(Encryption key:[[:blank:]]*)[^[:blank:]]+/\1[KEY REMOVED]/' *
sed -rn 's/^.*\<ESSID:"([^"]+)".*$/\1/p' 08-net-wifi | while read net; do
    sed -i "s^\<${net}\>^[ESSID REMOVED]^g" *
done

sed -i 's/^[^#][^[:blank:]]*/[LABEL REMOVED]/' 10-autos


# Create an  archive in the original directory
cd - 1>/dev/null
find "${dir}" ! -size 0c -printf '%P\n' | tar -cJf "${rep}" --mode 600 -C "${dir}" -T -
rm -r "${dir}"

echo "Created ${rep}"
