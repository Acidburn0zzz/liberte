#!/sbin/runscript

description="Sets up user anonymous identity, and randomizes wireless MACs."

luser=anon
lmount=/home/${luser}/persist
live=/mnt/live

torrc=/etc/tor/torrc
ltordir=${lmount}/security/tor/hidden_service
certsdir=${lmount}/security/cable/certs
gtordir=/var/lib/tor/hidden_service

# certdate should be legal, and also recent to allow
# for migration of v1.0 cables certificates
gentorhost=gen-tor-hostname
genuser=gen-cable-username
certdate=2012-06-16


depend() {
    # need OTFE mount
    need liberte

    # use entropy for keys generation / MAC randomization, if available
    use entropy

    # Tor identity (if any) must be initialized before running NetworkManager/Tor
    # MAC randomization needs to occur before NetworkManager startup
    before NetworkManager tor

    # Dependents wait indefinitely (important for parallel startup)
    keyword -timeout
}


start() {
    # Use Tor bridges if "bridges=IP[:port],..." boot option was specified
    # (includes provisional support for IPv6; default port is 443)
    bridges=`cat /proc/cmdline                                         \
        | sed -nr 's/^(.*[[:blank:]])?bridges=([^[:blank:]]+).*$/\2/p' \
        | LC_ALL=C tr -cd '[:xdigit:].:,[]' | tr , '\n'                \
        | sed -r 's/^[[:xdigit:]]+:[[:xdigit:]:]*$/[&]/;               \
                  s/(^[^:]*|])$/&:443/'`
    if [ -n "${bridges}" ]  &&  grep -q '^UseBridges[[:blank:]]\+0\>' ${torrc}; then
        ebegin Configuring Tor bridges
        sed -i 's/^\(UseBridges[[:blank:]]\+\).*/\11/; s/^ReachableAddresses\>/# &/' ${torrc}

        transport=
        if get_bootparam 'obfs'; then
            # (Tor: #5018)
            echo 'ClientTransportPlugin obfs2 exec /usr/bin/obfsproxy --managed' >> ${torrc}
            transport="obfs2 "
        fi

        for bridge in ${bridges}; do
            eindent
            einfo "Bridge: ${transport}${bridge}"
            echo  "Bridge  ${transport}${bridge}" >> ${torrc}
            echo  "ReachableAddresses  ${bridge}" >> ${torrc}
            eoutdent
        done
        eend $?
    fi


    # Create (small) Tor hidden service key + hostname, if they don't exist
    if [ ! -e ${ltordir} ]; then
        ebegin Initializing Tor hidden service directory
        sudo -n -u ${luser} ${gentorhost}
        eend $?
    fi


    # Propagate Tor hidden service files
    if [ -e ${gtordir} ]; then
        ebegin Verifying existing Tor hidden service hostname
        cmp -s ${ltordir}/hostname ${gtordir}/hostname
        eend $?
    else
        ebegin Propagating Tor hidden service directory
        rsync -rlptHS --safe-links --chmod=u=rwX,go= ${ltordir}/ ${gtordir} \
            && chown -hR tor:tor ${gtordir}
        eend $?
    fi


    # Create (big) private key + communication certificates + username
    if [ ! -e ${certsdir} ]  &&  mountpoint -q ${lmount}; then
        echo
        ebegin Generating communication certificates
        einfo 'It is a one-time operation - please do not interrupt'
        echo

        # input_begin

        # Temporarily fix the date while generating certificates, otherwise
        # the certificates might be generated with an invalid (future) date
        curdate=`date -u +'%F %T'`
        date -us "${certdate}" 1>/dev/null
        sudo -n -u ${luser} ${genuser}

        eend $?
        date -us "${curdate} `date -u +-%H%M`" 1>/dev/null

        # input_end
    fi


    # Randomize endings of wireless interfaces MAC addresses
    if ! get_bootparam 'noanon'; then
        ebegin Randomizing wireless MACs
        mac-randomize wireless
        eend $?
    else
        ewarn Skipping wireless MACs randomization
    fi

    :
}
