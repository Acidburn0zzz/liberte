#!/sbin/runscript

description="Sets up user anonymous identity, and randomizes wireless MACs."

luser=anon
lmount=/home/${luser}/persist

ltordir=${lmount}/security/tor/hidden_service
li2pdir=${lmount}/security/i2p/eepsite
certsdir=${lmount}/security/ssl/certs

gentorhost=/usr/libexec/cable/gen-tor-hostname
geni2phost=/usr/libexec/cable/gen-i2p-hostname
genuser=/usr/libexec/cable/gen-cable-username

gtordir=/var/lib/tor/hidden_service
gi2pdir=/var/lib/i2p/router/eepsite
cableflag=/var/www/cable

i2pnmplugin=/etc/NetworkManager/dispatcher.d/03-i2p

depend() {
    # need OTFE mount
    need liberte

    # use entropy for keys generation / MAC randomization, if available
    use entropy

    # Tor/I2P identities (if any) must be initialized before running NetworkManager/Tor/I2P
    # MAC randomization needs to occur before NetworkManager startup
    # nginx www directory is initialized here
    before NetworkManager tor i2p
    before nginx

    # Dependents wait indefinitely (important for parallel startup)
    keyword -timeout
}


start() {
    # Create (small) Tor hidden service key + hostname, if they don't exist
    if [ ! -e ${ltordir} ]; then
        ebegin Initializing Tor hidden service directory
        sudo -n -u ${luser} ${gentorhost}
        eend $?
    fi


    # Propagate Tor hidden service files
    if [ -e ${gtordir} ]; then
        ebegin Verifying existing Tor hidden service hostname
        cmp -s ${ltordir}/hostname ${gtordir}/hostname
        eend $?
    else
        ebegin Propagating Tor hidden service directory
        rsync -rlptHS --safe-links --chmod=u=rwX,go= ${ltordir}/ ${gtordir} \
            && chown -hR tor:tor ${gtordir}
        eend $?
    fi


    # Create (small) I2P eepsite key + b32/b64 hostnames, if they don't exist
    if [ ! -e ${li2pdir} ]; then
        ebegin Initializing I2P eepsite directory
        sudo -n -u ${luser} ${geni2phost}
        eend $?
    fi


    # Propagate I2P eepsite key
    if [ -e ${gi2pdir}/eepPriv.dat ]; then
        ebegin Verifying existing I2P eepsite key
        cmp -s ${li2pdir}/eepPriv.dat ${gi2pdir}/eepPriv.dat
        eend $?
    else
        ebegin Propagating I2P eepsite key
        rsync -lptHS --safe-links --chmod=u=rw,go= ${li2pdir}/eepPriv.dat ${gi2pdir} \
            && chown -h i2p:i2p ${gi2pdir}/eepPriv.dat
        eend $?
    fi


    # Create (big) private key + communication certificates + username
    if [ ! -e ${certsdir} ]  &&  mountpoint -q ${lmount}; then
        # Import splash functions (with an OpenRC compatibility hack)
        . /sbin/splash-functions.sh
        input_begin()   { splash svc_input_begin ${RC_SVCNAME}; }
        input_end()     { splash svc_input_end   ${RC_SVCNAME}; }


        echo
        ebegin Generating communication certificates
        einfo 'It is a one-time operation - please do not interrupt'
        echo

        input_begin
        sudo -n -u ${luser} ${genuser}

        eend $?
        input_end
    fi


    # Initialize public cables directory
    if [ -e ${certsdir}/username  -a  -e ${cableflag} ]; then
        ebegin Initializing cables directory
        username=`cat ${certsdir}/username | LC_ALL=C tr -cd '[:alnum:]'`
        rsync -lptHS --safe-links --chmod=u=rw,g=r,o= ${certsdir}/*.pem ${cableflag}/certs \
            && mv -T ${cableflag} /var/www/"${username}" \
            && sed -i "s/\<CABLE\>/${username}/; s/## allow/allow/" /etc/nginx/nginx-cable.conf
        eend $?
    fi


    if get_bootparam 'i2p'; then
        ewarn Enabling I2P
        chmod a+x ${i2pnmplugin}
        eend $?
    fi


    # Randomize endings of wireless interfaces MAC addresses
    ebegin Randomizing wireless MACs
    mac-randomize wireless 1>/dev/null
    eend $?
}
