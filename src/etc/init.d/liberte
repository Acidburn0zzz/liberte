#!/sbin/runscript


depend() {
    # depend on dm-mod module
    need modules

    # gentoo=nox -> /etc/.noxdm
	need xdm-setup

    # SMART detection needs active disks
    after smartd

    # use entropy for encrypted storage, if available
    after urandom rngd

    # password entry is on console
    after clock numlock gpm consolefont fbcondecor
    before xdm

    # Tor config (if any) must be extracted before running Tor
    before wicd tor

    # Avoid ps-mount reloading autofs upon LVM partition attachment
    before autofs
}


# Fix a bug in /sbin/splash-functions.sh
splash_get_mode() {
    local ctty=`${spl_bindir}/fgconsole`
    local mode=`${spl_util} -c getmode`

    if [ "${mode}" = silent ]; then
        echo silent
    elif ${spl_decor} -c getstate --tty=${ctty} 2>/dev/null | grep -q off; then
        echo off
    else
        echo verbose
    fi
}


# Prompt to print before password requests
eprompt() {
    local stars=`echo "$@" | sed 's/./-/g'`
    echo
    echo " * ${stars}"
    echo " * $@"
    echo " * Keyboard map: `awk -F= '/^KEYMAP=/ { print $2 }' /etc/conf.d/keymaps`"
    echo " * ${stars}"
    echo
}


# Shared variables
luser=anon
lgroup=legion
lmount=/home/${luser}/persist
otfefile=/mnt/cdrom${OTFEFILE}


start() {
    # see the /root/bin/ps-mount script
    # these flags are mirrored in /root/bin/otfe-resize
    # NOTE: dirs are group-accessible, files are group-readable
    ntfsflags=noatime,noexec,nosuid,nodev,fmask=0137,dmask=067,uid=${luser},gid=${lgroup}

    cddev=`grep ' /mnt/cdrom ' /proc/mounts | cut -d' ' -f1`
    cdtype=`grep ' /mnt/cdrom ' /proc/mounts | cut -d' ' -f3`


    # Lock root account's password
    ebegin Disabling root password
    usermod -L root
    eend $?


    # genkernel's init leaves /etc/mtab somewhat messed
    ebegin Updating mtab
    egrep -v ' (rootfs|autofs|/mnt/hidden/newroot) ' /proc/mounts > /etc/mtab
    eend $?


    # Limit console logging
    ebegin Reducing console logging level
    dmesg -n 4  &&  truncate -s 0 /var/log/dmesg
    eend $?


    # Arm the poweroff watchdog
    ebegin Arming power-off on removal: ${cddev}
    /root/bin/poweroff-watchdog ${cddev} &
    eend $?


    # Configure X server, unless "nox" is given to kernel (rely on xdm-setup)
    if [ ! -e /etc/.noxdm  -a  ! -e /etc/X11/xorg.conf ]; then
        ebegin Configuring X server
        if HOME=/root Xorg -configure 2>/dev/null && [ -e /root/xorg.conf.new ]; then
            mv /root/xorg.conf.new /etc/X11/xorg.conf
            cat >> /etc/X11/xorg.conf <<EOF
Section "ServerFlags"
    Option "DontZap"      "true"
    Option "DontVTSwitch" "false"
EndSection
EOF
            eend 0
        else
            eend 1
        fi
    fi


    # Put ATA/SCSI drives into standby
    # /dev/disk/by-path should contain only physical devices
    if [ -e /dev/disk/by-path ]; then
        hdevs=`find /dev/disk/by-path -xtype b -exec readlink -e {} \;`
        for dev in ${hdevs}; do
            # ignore boot media (desirable if it is a disk)
            if [ "${cddev#${dev}}" = "${cddev}" ]; then
                if hdparm -y ${dev} 1>/dev/null 2>&1; then
                    ebegin Enabled standby mode: ${dev}
                    eend 0
                fi
            fi
        done
    fi


    # Enable power management for wireless
    # awk -F: '/eth.:|tr.:|ath.:|wlan.:/{print $1}' /proc/net/dev
    wdevs=`iwconfig 2>/dev/null | grep -oE '^[^ ]+'`
    for dev in ${wdevs}; do
        ebegin Enabling wireless power management: ${dev}
        iwconfig ${dev} power on
        eend $?
    done


    # In QEMU, /mnt/cdrom takes the role of /mnt/livecd (looptype=noloop)
    remount=1
    if [ ${cdtype} = vfat ]; then
        # Remount media root read-write (assuming vfat)
        ebegin Remounting /mnt/cdrom read-write
        mount -o remount,rw /mnt/cdrom
        remount=$?
        eend ${remount}
    fi


    # Proceed with OTFE attachment only if remount-rw succeeded
    # (a read-only persist directory is more problematic than tmpfs)
    if [ ${remount} = 0 ]; then
        # Add an OTFE line to /etc/fstab, so that autofs won't mount the LVM
        # device later, and for otfe-resize script to be able to mount it
        if ! grep -q "^/dev/mapper/${OTFEVOLUME} " /etc/fstab; then
            echo "/dev/mapper/${OTFEVOLUME} ${lmount} ntfs-3g noauto,${ntfsflags} 0 0" >> /etc/fstab
        fi

        # Initialize LUKS image mapping (create if it doesn't exist)
        splash svc_input_begin ${SVCNAME}
        if [ ! -e ${otfefile} ]; then
            # FAT free space is precise, but df rounds up - ignore this issue
            freespace=`df -P -B 1M /mnt/cdrom | awk '/\// { print $4 }'`
            otfesize=$[ ${freespace} * ${OTFESIZE%/*} / ${OTFESIZE#*/} ]

            # 3 MiB is the minimum possible size (rounded up to MiB)
            if [ ${otfesize} -lt 3 ]; then
                otfesize=3
            fi

            # FAT has no sparse files, so insufficient space will fail here
            ebegin "Initializing ${otfesize} MiB encrypted storage (${OTFESIZE} of free space)"
            if mkdir -p `dirname ${otfefile}` && truncate -s ${otfesize}M ${otfefile}; then
                loop=`losetup -f ${otfefile} --show`
                eend $?

                eprompt Please specify new password for ${otfefile}
                inittries=10
                while [ ${inittries} -ne 0 ] && ! cryptsetup -qy -c ${OTFECIPHER} -h ${OTFEHASH} luksFormat ${loop}; do
                    let inittries=inittries-1
                done

                if [ ${inittries} -ne 0 ]; then
                    echo -e '\n * LUKS initialized, run "sudo otfe-resize" to resize encrypted storage'

                    ebegin Backing up crypto header: ${otfefile}-hdr.bak
                    rm -f ${otfefile}-hdr.bak
                    cryptsetup luksHeaderBackup --header-backup-file ${otfefile}-hdr.bak ${loop}
                    eend $?

                    eprompt Please re-enter the password for ${otfefile}
                    cryptsetup -T 100 luksOpen ${loop} ${OTFEVOLUME}

                    # LC_ALL enables UTF-8 label support
                    ebegin Formatting encrypted storage as NTFS: ${otfefile}
                    LC_ALL=en_GB.UTF-8 mkntfs -q -f -C -I -L "${OTFELABEL}" -p 0 -H 0 -S 0 /dev/mapper/${OTFEVOLUME}
                    eend $?
                else
                    losetup -d ${loop}
                    rm ${otfefile}
                    eerror Failed to initialize encrypted storage
                fi
            else
                rm -f ${otfefile}
                eend 1 "Failed to create ${otfesize} MiB encrypted storage"
            fi
        else
            eprompt Please provide a password for ${otfefile}
            loop=`losetup -f ${otfefile} --show`
            if ! cryptsetup -T 100 luksOpen ${loop} ${OTFEVOLUME}; then
                eerror Failed to attach encrypted storage: ${otfefile}
            fi
        fi
        splash svc_input_end ${SVCNAME}

        # Mount OTFE filesystem
        if [ -e /dev/mapper/${OTFEVOLUME} ]; then
            ebegin Mounting encrypted storage: ${lmount}
            mount ${lmount}
            eend $?

            # Recreate persist subdirs (for xdg-user-dir and claws-mail)
            ebegin Verifying persistence directories
            rsync -aO /mnt/livecd${lmount}/ ${lmount}
            eend $?
        fi
    else
        ewarn Skipping OTFE persistence setup
    fi


    # Extract configuration archive, if present
    # This comes last, so that failure invalidates service start
    if [ -e ${lmount}/settings/config.tar.xz ]; then
        # Sanity check (Wicd shouldn't start before local)
        if [ -d /home/${luser}/config/tor/hidden_service ]; then
            ewarn Existing Tor configuration in ${lmount}
        fi

        ebegin Restoring persistent configuration: ${lmount}/settings
        sudo -n -u ${luser} /home/${luser}/bin/persistence restore ${lmount}/settings
        eend $?
    fi
}

stop() {
    # Save configuration (an incremental snapshot)
    if [ -e /mnt/livecd/home/${luser} ]; then
        ebegin Saving configuration: ${lmount}/settings
        sudo -n -u ${luser} /home/${luser}/bin/persistence save ${lmount}/settings /mnt/livecd
        eend $?
    fi


    # Unmount the persistent fs
    if grep -q " ${lmount} " /proc/mounts; then
        ebegin Unmounting ${lmount}
        umount -l ${lmount}
        eend $?

        ebegin Detaching encrypted storage
        cryptsetup luksClose ${OTFEVOLUME}
        losetup -d `losetup -j ${otfefile} | cut -d: -f1`
        eend $?
    fi


    # Remount media root read-only
    # (apparently, does not conflict with write cache)
    ebegin Remounting /mnt/cdrom read-only
    mount -o remount,ro /mnt/cdrom
    eend $?
}
