#!/sbin/runscript


depend() {
    # depend on dm-mod module
    need modules

    # gentoo=nox -> /etc/.noxdm
	need xdm-setup

    # start after power management is enabled
    after laptop_mode

    # use entropy for encrypted storage, if available
    use urandom rngd

    # password entry is on console
    after  clock numlock gpm consolefont
    use    fbcondecor
    before xdm

    # Tor config (if any) must be initialized before running Tor
    # bluetooth needs to start before NetworkManager
    # Privoxy config may be modified here
    after  bluetooth
    before NetworkManager wicd tor privoxy

    # Avoid ps-mount reloading autofs upon LVM partition attachment
    before autofs
}


# Fix a bug in /sbin/splash-functions.sh
splash_get_mode() {
    local ctty=`${spl_bindir}/fgconsole`
    local mode=`${spl_util} -c getmode`

    if [ "${mode}" = silent ]; then
        echo silent
    elif ${spl_decor} -c getstate --tty=${ctty} 2>/dev/null | grep -q off; then
        echo off
    else
        echo verbose
    fi
}


# Prompt to print before password requests
eprompt() {
    local stars=`echo "$@" | sed 's/./-/g'`
    echo
    einfo "${stars}"
    einfo "$@"
    einfo "Keyboard map: `awk -F= '/^KEYMAP=/ { print toupper($2) }' /etc/conf.d/keymaps | tr -d '\042'`"
    einfo "${stars}"
    echo
}


# Shared variables
luser=anon
lgroup=legion
lmount=/home/${luser}/persist
ltordir=${lmount}/security/tor/hidden_service
otfefile=/mnt/cdrom${OTFEFILE}

start() {
    # see the /root/bin/ps-mount script
    # these flags are mirrored in /root/bin/otfe-resize
    # (permissions: rwX------)
    ntfsflags=noatime,noexec,nosuid,nodev,fmask=0177,dmask=077,uid=${luser},gid=${lgroup}

    cddev=`grep ' /mnt/cdrom ' /proc/mounts | cut -d' ' -f1`
    cdtype=`grep ' /mnt/cdrom ' /proc/mounts | cut -d' ' -f3`


    # Lock root account's password
    ebegin Disabling root password
    usermod -L root
    eend $?


    # genkernel's init leaves /etc/mtab somewhat messed
    ebegin Updating mtab
    egrep -v ' (rootfs|autofs|/mnt/hidden/newroot) ' /proc/mounts > /etc/mtab
    eend $?


    # Limit dmesg console logging (wtmp is recreated by /sbin/rc in sysinit runlevel)
    ebegin Reducing kernel console logging level
    rm -f /var/log/wtmp
    dmesg -n 4  &&  truncate -s 0 /var/log/dmesg
    eend $?


    # Arm the poweroff watchdog
    if ! pgrep -u root -x udev-watchdog 1>/dev/null; then
        ebegin Arming power-off on removal: ${cddev}
        /root/bin/poweroff-watchdog ${cddev} &
        eend $?
    fi


    # Configure X server, unless "nox" is given to kernel (rely on xdm-setup)
    if [ ! -e /etc/.noxdm  -a  ! -e /etc/X11/xorg.conf ]; then
        ebegin Configuring X server
        if HOME=/root Xorg -configure 2>/dev/null && [ -e /root/xorg.conf.new ]; then
            mv /root/xorg.conf.new /etc/X11/xorg.conf

            # QEMU + 24bpp + Openbox: http://bugzilla.icculus.org/show_bug.cgi?id=4363
            if egrep -q '^[[:space:]]*BoardName[[:space:]]+"GD 5446"$' /etc/X11/xorg.conf; then
                sed -i 's/[[:space:]]*Identifier[[:space:]]\+"Screen0"$/&\n\tDefaultDepth 16/' /etc/X11/xorg.conf
            fi

            cat >> /etc/X11/xorg.conf <<EOF
Section "ServerFlags"
    Option "DontZap"      "true"
    Option "DontVTSwitch" "false"
EndSection
EOF
            eend 0
        else
            eend 1
        fi
    fi


    # Put ATA/SCSI drives into standby
    # /dev/disk/by-path should contain only physical devices
    if [ -e /dev/disk/by-path ]; then
        hdevs=`find /dev/disk/by-path ! -name '*-part[0-9]*' -xtype b -exec readlink -e {} \;`
        for dev in ${hdevs}; do
            if hdparm -M 128 ${dev} 1>/dev/null 2>&1; then
                ebegin Enabled acoustic settings: ${dev}
                eend 0
            fi

            # ignore boot media (desirable if it is a disk)
            if [ "${cddev#${dev}}" = "${cddev}" ]; then
                if hdparm -y ${dev} 1>/dev/null 2>&1; then
                    ebegin Enabled standby mode: ${dev}
                    eend 0
                fi
            fi
        done
    fi


    # In QEMU, /mnt/cdrom takes the role of /mnt/livecd (looptype=noloop)
    remount=1
    if [ ${cdtype} = vfat ]; then
        # Remount media root read-write (assuming vfat)
        ebegin Remounting /mnt/cdrom read-write
        mount -o remount,rw /mnt/cdrom
        remount=$?
        eend ${remount}
    # Same check is done in fw-reload
    elif grep -q '\<looptype=noloop\>' /proc/cmdline; then
        ebegin Disabling privacy-supporting services
        chmod a-x /etc/NetworkManager/dispatcher.d/*
        sed -i 's/^forward-socks.*\<localhost:9050\>/#&/' /etc/privoxy/config
        eend $?
    fi


    # Proceed with OTFE attachment only if remount-rw succeeded
    # (a read-only persist directory is more problematic than tmpfs)
    if [ ${remount} = 0 ]; then

        # Add an OTFE line to /etc/fstab, so that autofs won't mount the LVM
        # device later, and for otfe-resize script to be able to mount it
        if ! grep -q "^/dev/mapper/${OTFEVOLUME} " /etc/fstab; then
            echo "/dev/mapper/${OTFEVOLUME} ${lmount} ntfs-3g noauto,${ntfsflags} 0 0" >> /etc/fstab
        fi

        # Initialize LUKS image mapping (create if it doesn't exist)
        if [ ! -e ${otfefile} ]; then
            # FAT free space is precise, but df rounds up - ignore this issue
            freespace=`df -P -B 1M /mnt/cdrom | awk '/\// { print $4 }'`
            otfesize=$[ ${freespace} * ${OTFESIZE%/*} / ${OTFESIZE#*/} ]

            # 3 MiB is the minimum possible size (rounded up to MiB)
            if [ ${otfesize} -lt 3 ]; then
                otfesize=3
            fi

            # FAT has no sparse files, so insufficient space will fail here
            ebegin "Initializing ${otfesize} MiB encrypted storage (${OTFESIZE} of free space)"
            if mkdir -p `dirname ${otfefile}` && truncate -s ${otfesize}M ${otfefile}; then
                loop=`losetup -f ${otfefile} --show`
                eend $?

                eprompt Please specify new password for ${otfefile}
                splash svc_input_begin ${SVCNAME}

                inittries=10
                while [ ${inittries} -ne 0 ] && ! cryptsetup -qy -c ${OTFECIPHER} -s ${OTFEKEYSIZE} -h ${OTFEHASH} luksFormat ${loop}; do
                    let inittries=inittries-1
                done

                if [ ${inittries} -ne 0 ]; then
                    echo
                    einfo 'OTFE initialized, run "sudo otfe-resize" to resize encrypted storage'


                    # Here is a good place to notify the user about certificates generation
                    echo
                    einfo 'NOTE: After mounting the OTFE partition, communication certificates'
                    einfo 'will be generated. It is a one-time operation that may take some time.'
                    einfo '[key size is currently reduced, since this functionality is unused]'


                    eprompt Please re-enter the password for ${otfefile}
                    cryptsetup -T 100 luksOpen ${loop} ${OTFEVOLUME}

                    splash svc_input_end ${SVCNAME}
                    echo

                    ebegin Backing up crypto header: ${otfefile}-hdr.bak
                    rm -f ${otfefile}-hdr.bak
                    cryptsetup luksHeaderBackup --header-backup-file ${otfefile}-hdr.bak ${loop}
                    eend $?

                    # LC_ALL enables UTF-8 label support
                    ebegin Formatting encrypted storage as NTFS: ${otfefile}
                    LC_ALL=en_GB.UTF-8 mkntfs -q -f -C -I -L "${OTFELABEL}" -p 0 -H 0 -S 0 /dev/mapper/${OTFEVOLUME}
                    eend $?
                else
                    losetup -d ${loop}
                    rm ${otfefile}

                    eerror Failed to initialize encrypted storage
                    splash svc_input_end ${SVCNAME}
                fi
            else
                rm -f ${otfefile}
                eend 1 "Failed to create ${otfesize} MiB encrypted storage"
            fi
        else
            eprompt Please provide a password for ${otfefile}
            splash svc_input_begin ${SVCNAME}

            loop=`losetup -f ${otfefile} --show`
            if ! cryptsetup -T 100 luksOpen ${loop} ${OTFEVOLUME}; then
                eerror Failed to attach encrypted storage: ${otfefile}
            fi

            splash svc_input_end ${SVCNAME}
            echo
        fi


        # Mount OTFE filesystem
        if [ -e /dev/mapper/${OTFEVOLUME} ]; then

            ebegin Mounting encrypted storage: ${lmount}
            mount ${lmount}
            eend $?
            lmountok=$?


            # Recreate persist subdirs (for xdg-user-dir and claws-mail)
            if [ ${lmountok} = 0 ]; then
                ebegin Recreating persistence directories
                cp -an /mnt/livecd${lmount} `dirname ${lmount}`
                eend $?
            fi


            # Extract configuration archive, if present
            if [ -e ${lmount}/settings/config.tar.xz ]; then
                ebegin Restoring persistent configuration: ${lmount}/settings
                sudo -n -u ${luser} /home/${luser}/bin/persistence restore ${lmount}/settings
                eend $?
            fi


            # Create (small) Tor hidden service key + hostname, if they don't exist
            if [ ! -e ${ltordir} ]; then
                ebegin Initializing Tor hidden service directory
                sudo -n -u ${luser} /home/${luser}/bin/gen-anon-hostname
                eend $?
            fi


            # Propagate Tor hidden service files
            if [ -e /var/lib/tor/hidden_service ]; then
                ebegin Verifying existing Tor hidden service hostname
                cmp -s ${ltordir}/hostname /var/lib/tor/hidden_service/hostname
                eend $?
            else
                ebegin Propagating Tor hidden service directory
                rsync -aHS --no-o --no-g --no-p --chmod=go= ${ltordir} /var/lib/tor \
                    && chown -hR tor:tor /var/lib/tor/hidden_service
                eend $?
            fi


            # Create (big) private key + communication certificates + username
            if [ ${lmountok} = 0  -a  ! -e ${lmount}/security/ssl/certs ]; then
                ebegin Generating communication certificates
                sudo -n -u ${luser} /home/${luser}/bin/gen-anon-username
                eend $?
            fi

        fi

    else
        ewarn Skipping OTFE persistence setup
    fi
}


stop() {
    # Save configuration (an incremental snapshot)
    if [ -e /mnt/livecd/home/${luser} ]; then
        ebegin Saving configuration: ${lmount}/settings
        sudo -n -u ${luser} /home/${luser}/bin/persistence save ${lmount}/settings /mnt/livecd
        eend $?
    fi


    # Unmount the persistent fs
    if grep -q " ${lmount} " /proc/mounts; then
        ebegin Unmounting ${lmount}
        umount -l ${lmount}
        eend $?

        ebegin Detaching encrypted storage
        cryptsetup luksClose ${OTFEVOLUME}
        losetup -d `losetup -j ${otfefile} | cut -d: -f1`
        eend $?
    fi


    # Remount media root read-only
    # (apparently, does not conflict with write cache)
    ebegin Remounting /mnt/cdrom read-only
    mount -o remount,ro /mnt/cdrom
    eend $?
}
