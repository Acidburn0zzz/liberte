#!/bin/bash -e

# Parameter:
#   + (none):  build and install main and kexec kernels
#   + prepare: prepare main kernel for building external modules
#   + modules: build and install main kernel modules and firmware
cmd="$1"


# Kernel version
hsversion=`cat ${HOME}/config/kversion`
kversion=${hsversion/-/-hardened-}
[ ${kversion} != ${hsversion} ] || kversion=${hsversion}-hardened


# Build host anonymity
bver=KBUILD_BUILD_VERSION=0
bts=KBUILD_BUILD_TIMESTAMP=`date -u +%F`
buser=KBUILD_BUILD_USER=liberte
bhost=KBUILD_BUILD_HOST=dee.su


# Module signing keys
sbdir=/usr/local/addons/secureboot
sb_kmod=${sbdir}/Liberte-SecureBoot-Kernel-1
sighash=sha256


# Paths
kernsrc=/usr/src/linux-${kversion}
mainobj=/usr/src/linux-main
kexecobj=/usr/src/linux-kexec
kexec64obj=/usr/src/linux-kexec-64

mainimg=/boot/kernel-x86.zi
mainmod=/lib/modules/${kversion}
initrd=/usr/local/addons/initrd/initrd-x86.cpio
kexecimg=/usr/local/boot/kernel-kexec.zi
kexec64img=/usr/local/boot/kernel-kexec-64.zi

bzimage=arch/x86/boot/bzImage
fwpath=/usr/local/addons/shipped-fw


# Make options
makeopts=`portageq envvar MAKEOPTS`
rmake="make -s ${makeopts} -C ${kernsrc} ${bver} ${bts} ${buser} ${bhost}"
make="sudo -n -u bin ${rmake}"


# Ensure presence of module signing keys / certs
# (MODSECKEY / MODPUBKEY do not affect kernel/modsign_certificate.o)
if [ ! -e ${mainobj}/signing_key.x509 ]; then
    ln -s    ${sb_kmod}.der ${mainobj}/signing_key.x509
    ln -s    ${sb_kmod}.key ${mainobj}/signing_key.priv
    touch -d 1970-01-01     ${mainobj}/x509.genkey
    truncate -s 0           ${mainobj}/extra_certificates
    chown -h bin:bin        ${mainobj}/signing_key.{x509,priv} \
                            ${mainobj}/x509.genkey             \
                            ${mainobj}/extra_certificates
fi


# Handle kernel preparation for building external modules
if [ "${cmd}" = prepare ]; then
    # sudo might not be available at this stage
    su - -s /bin/sh bin -c "${rmake} O=${mainobj} modules_prepare"
    exit
elif [ "${cmd}" = modules ]; then
    # vmlinux is necessary for System.map (although initramfs may not exist yet,
    # or is outdated), which is needed for module dependencies to be used by
    # gen-initramfs; this also generates gen_init_cpio
    if [ ! -e ${initrd} ]; then
        touch ${initrd}
    fi
    ${make}  O=${mainobj} vmlinux 2>/dev/null

    # Build main kernel modules (chmod due to GRKERNSEC_HIDESYM)
    ${make}  O=${mainobj} modules 2>/dev/null
    ${rmake} O=${mainobj} INSTALL_FW_PATH=${fwpath} modules_install

    rm ${mainmod}/{build,source}
    chmod go= ${mainmod}

    # Sign out-of-tree modules
    find ${mainmod} -mindepth 2 ! -path "${mainmod}/kernel/*" -type f -name '*.ko' | \
    while read mod; do
        if ! grep -q '~Module signature appended~' "${mod}"; then
            ${kernsrc}/scripts/sign-file ${sighash} ${sb_kmod}.key ${sb_kmod}.der "${mod}"
        fi
    done

    exit
fi


# Build main kernel (chmod due to GRKERNSEC_HIDESYM)
${make} O=${mainobj} bzImage 2>/dev/null
cp ${mainobj}/${bzimage} ${mainimg}

chmod go= ${mainimg}


# Build KEXEC kernel
${make} O=${kexecobj} bzImage 2>/dev/null
cp ${kexecobj}/${bzimage} ${kexecimg}

# Cross-compile 64-bit KEXEC kernel
# (x86_64-gcc is a wrapper, x86_64-{ar,ld,nm,objcopy} are symlinks)
${make} O=${kexec64obj} ARCH=x86_64 CROSS_COMPILE=x86_64- bzImage 2>/dev/null
cp ${kexec64obj}/${bzimage} ${kexec64img}
