#!/bin/busybox ash

# Handle kexec reboot / shutdown
# [quiet] memwipe [halt]
for x in $*; do
    case "${x}" in
        memwipe) MEMWIPE=1 ;;
        halt)    HALT=1    ;;
    esac
done

if [ -n "${MEMWIPE}" ]; then
    clear
    echo 'Wiping RAM (expecting out-of-memory kills)'

    # Free as much RAM as possible
    rm -r /etc /rwroot /sbin/v86d /lib

    mount -t proc proc /proc
    sysctl -w kernel.printk=0 vm.overcommit_memory=1 vm.drop_caches=3 >/dev/null
    umount /proc

    # Wipe memory
    /sbin/memwipe
    sleep 0.5
    
    if [ -z "${HALT}" ]; then
        echo Rebooting ...
        exec reboot -nf
    else
        echo Powering off ...
        exec poweroff -nf
    fi

    exit 1
fi


# Default variables
export PATH="/sbin:/bin"

UNION=/union
RWROOT=/rwroot
BOOT=${RWROOT}/mnt/boot
LIVE=${RWROOT}/mnt/live

. /etc/modules.forced
. /etc/init.scripts
[ -e /etc/init.splash ] && . /etc/init.splash


# Clean input/output
exec </dev/console >/dev/console 2>&1


# Mount virtual filesystems
mount -t proc  proc  /proc
mount -t sysfs sysfs /sys

mount -t tmpfs -o mode=755 tmpfs ${UNION}
cp -a ${RWROOT}/* ${UNION}
mount -o move ${UNION} ${RWROOT}


quiet_kmsg


# Parse kernel options
CDROOT_TYPE=auto
CDROOT_FLAGS=noatime
for x in `cat /proc/cmdline`; do
    case "${x}" in
        cdroot\=*)
            CDROOT_DEV=`parse_opt "${x}"`
        ;;
        cdroot_type\=*)
            CDROOT_TYPE=`parse_opt "${x}"`
        ;;
        cdroot_flags\=*)
            CDROOT_FLAGS=`parse_opt "${x}"`
        ;;
        loop\=*)
            LOOP=`parse_opt "${x}"`
        ;;
        debug)
            DEBUG=1
        ;;
        video\=uvesafb:*)
            VESA_MODE=`parse_opt "${x}" | cut -d: -f2 | cut -d, -f1`
        ;;
    esac
done


# Handle uvesafb
if [ -n "${VESA_MODE}" ]; then
    echo "options uvesafb mode_option=${VESA_MODE} mtrr=3 scroll=ywrap"
    FORCE_LOAD="${FORCE_LOAD} uvesafb"
else
    echo "blacklist uvesafb"
fi > /etc/modprobe.d/framebuffer.conf
cp -a /etc/modprobe.d ${RWROOT}/etc


good_msg 'Loading modules'

# Setup hotplugging before starting coldplugging
echo /bin/mdev > /proc/sys/kernel/hotplug

oldmods=
newmods=" ${FORCE_LOAD} "
while [ "${oldmods}" != "${newmods}" ]; do
    for modalias in ${newmods}; do
        if ! echo "${oldmods}" | grep -q " ${modalias} "; then
            modprobe -q ${modalias} 2>/dev/null
        fi
    done

    oldmods="${newmods}"
    newmods=' '$(cat $(find /sys/devices -name modalias) | sort -u | tr '\n' ' ')
done

# Start device manager
mdev -s


# Run debug shell if requested
rundebugshell


splash init


# No "udevadm settle" with mdev, so just loop
good_msg "Looking for the media"
tested=' '
waitmsg=0

while true; do
    if [ ${waitmsg} = 1 ]; then
        warn_msg 'Waiting for the media ...'
        waitmsg=0
    fi

    if [ -n "${CDROOT_DEV}" ]; then
        devices="${CDROOT_DEV}"
    else
        devices="/dev/sd* /dev/hd* /dev/sr* /dev/vd* /dev/ubd*"
    fi

    for mediadev in ${devices}; do
        # Check for a block device to mount
        if [ -b "${mediadev}" ] && ! echo "${tested}" | grep -q " ${mediadev} "; then
            tested="${tested}${mediadev} "

            # Skip if disk has at least one partition (heuristic)
            mediadevname=`basename ${mediadev}`
            if ! ls /sys/block/${mediadevname}/${mediadevname}[0-9]* >/dev/null 2>&1; then
                good_msg "Attempting to mount media: ${mediadev}"

                if mount -r -t ${CDROOT_TYPE} -o ${CDROOT_FLAGS} ${mediadev} ${BOOT} >/dev/null 2>&1; then
                    # Check for the recognition file
                    if [ -e ${BOOT}/"${LOOP}" ]; then
                        good_msg "Media found on ${mediadev}"
                        break 2
                    else
                        umount ${BOOT}
                    fi
                fi

                waitmsg=1
            fi
        fi
    done

    sleep 0.5
done

test_success "find media to mount"


# Setup the loopback mounts
if [ -n "${LOOP}" ]; then
    # CONFIG_FEATURE_DEVFS must be disabled for BusyBox
    good_msg 'Mounting squashfs filesystem'
    mount -r -t squashfs ${BOOT}/"${LOOP}" ${LIVE}
    test_success 'mount compressed filesystem'
else
    mount -o move ${BOOT} ${LIVE}
fi


good_msg "Creating union mount"
mount -t unionfs -o dirs=${RWROOT}=rw:${LIVE}=ro unionfs ${UNION}
test_success 'create union mount'

# Move RWROOT submounts to UNION (will be then adjusted after switch_root)
for mnt in $(cut -d' ' -f2 /proc/mounts | sed -n "s:^${RWROOT}/:/:p"); do
    mount -o move ${RWROOT}${mnt} ${UNION}${mnt}
done

# Move the RWROOT mount to a hidden directory on UNION
# (rw layer directly accessible only by root)
mount -o move ${RWROOT} ${UNION}/mnt/hidden${RWROOT}


verbose_kmsg


good_msg 'Booting (initramfs)'
if [ ! -e ${UNION}/dev/console  -o  ! -e ${UNION}/dev/null ]; then
    bad_msg 'Real /dev is missing files required to boot (console and null)'
elif [ -e /etc/init.splash      -a  ! -e ${UNION}/dev/tty1 ]; then
    bad_msg 'Real /dev is missing tty1, which is required for splash'
fi


echo > /proc/sys/kernel/hotplug
umount /sys  || bad_msg 'Failed to unmount /sys'
umount /proc || bad_msg 'Failed to unmount /proc'


cd ${UNION}
exec switch_root -c /dev/console ${UNION} /sbin/init


# If we get here, something bad has happened
splash verbose


echo 'A fatal error has probably occured since /sbin/init did not'
echo 'boot correctly. Trying to open a shell...'
exec sh
