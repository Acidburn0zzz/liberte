#!/bin/busybox ash

# Default variables
export PATH="/sbin:/bin"

# Bootstrap procedure (in /stage):
# mount /rwroot
# mount /boot
# mount /live   (from squashfs in /boot)
# move  /boot   -> /live/mnt/boot
# bind  /live   -> /live/mnt/live
# move  /rwroot -> /live/mnt/rwroot
# switch_root to /live
stage=/stage

sboot=${stage}/boot
slive=${stage}/live
srwroot=${stage}/rwroot

mboot=${slive}/mnt/boot
mlive=${slive}/mnt/live
mrwroot=${slive}/mnt/rwroot


# External scripts
. /etc/modules.fs
. /etc/init.scripts


# Mount virtual filesystems
mount -t proc  proc  /proc
echo 0 > /proc/sys/kernel/grsecurity/audit_mount
mount -t sysfs sysfs /sys

# Mount rwroot tmpfs directory (nosuid,... don't affect unionfs)
mount -t tmpfs -o mode=700,nosuid,nodev,noexec tmpfs ${srwroot}
mkdir -m 755 ${srwroot}/etc ${srwroot}/var ${srwroot}/home

# Mount devtmpfs filesystem (noexec: (#92921))
mount -t devtmpfs -o nosuid,noexec devtmpfs /dev


# Parse kernel options
param_cdroot='/dev/sd* /dev/sr* /dev/vd*'
param_cdroot_type=auto
param_cdroot_flags=noatime
for param in `cat /proc/cmdline`; do
    eval param_${param%%[=.]*}=${param#*=} 2>/dev/null
done


# Hotplugging is handled similarly in /sbin/hotplug (UEVENT_HELPER_PATH)
good_msg 'Loading modules'

# Specify required filesystem modules (no autoloading on mount)
# Load EHCI unconditionally, otherwise USB 1.1 might be forced if OHCI/UHCI comes up first
eval force_load=\"loop squashfs ehci-hcd \${force_load_"${param_cdroot_type}"}\"

oldmods=
newmods=" ${force_load} "
while [ "${oldmods}" != "${newmods}" ]; do
    for modalias in ${newmods}; do
        if ! echo "${oldmods}" | grep -q " ${modalias} "; then
            modprobe -qb ${modalias}
        fi
    done

    oldmods="${newmods}"
    newmods=' '$(cat $(find /sys/devices -name modalias) | sort -u | tr '\n' ' ')
done


# Run debug shell if requested
rundebugshell


# No "udevadm settle", so just loop
good_msg "Looking for the media"
tested=' '
waitmsg=0

while true; do
    if [ ${waitmsg} = 1 ]; then
        warn_msg 'Waiting for the media ...'
        waitmsg=0

        # Incorrect USB hubs? (VMWare)
        modprobe -b sd_mod
        modprobe -b usb-storage
    fi

    for mediadev in ${param_cdroot}; do
        # Check for a block device to mount
        if [ -b "${mediadev}" ] && ! echo "${tested}" | grep -q " ${mediadev} "; then
            tested="${tested}${mediadev} "

            # Skip if disk has at least one partition (heuristic)
            mediadevname=`basename ${mediadev}`
            if ! ls /sys/block/${mediadevname}/${mediadevname}[0-9]* 1>/dev/null 2>&1; then
                good_msg "Attempting to mount media: ${mediadev}"

                # Unless the media is already in ro mode, write-protect it during mount
                mediaro=`blockdev --getro ${mediadev} 2>/dev/null` || mediaro=1
                [ ${mediaro} = 1 ] || blockdev --setro ${mediadev}

                if mount -r -t ${param_cdroot_type} -o ${param_cdroot_flags} ${mediadev} ${sboot} >/dev/null 2>&1; then
                    # Check for the recognition file
                    if [ -e ${sboot}${param_loop} ]; then
                        good_msg "Media found on ${mediadev}"

                        [ ${mediaro} = 1 -o -n "${param_readonly}" ] || blockdev --setrw ${mediadev}
                        break 2
                    else
                        umount ${sboot}
                    fi
                fi

                [ ${mediaro} = 1 ] || blockdev --setrw ${mediadev}
                waitmsg=1
            fi
        fi
    done

    sleep 0.5
done

test_success "find media to mount"


# Setup the loopback mounts
verifyroot() {
    local image="$1"

    if [ -n "${param_cdroot_hash}" ]; then
        good_msg 'Verifying filesystem image ...'
        sfshash=`sha256sum ${image}`
        param_cdroot_hash=`echo "${param_cdroot_hash}" | tr A-F a-f`

        [ "${param_cdroot_hash}" = "${sfshash%% *}" ]
        test_success "verify filesystem image hash"
    else
        warn_msg 'Skipping filesystem image verification'
    fi
}

if [ -n "${param_loop}" ]; then
    rootimg=${sboot}${param_loop}

    # If copying squashfs image to RAM, force read-only losetup
    # (BusyBox does not do that automatically (Busybox: #4784))
    if [ -n "${param_toram}" ]; then
        good_msg 'Copying filesystem image to RAM ...'
        rootimgram=${srwroot}/cache/root.sfs

        mkdir -m 700  ${srwroot}/cache
        cp ${rootimg} ${rootimgram} || rm ${rootimgram}
        rootimg=${rootimgram}

        mount -o remount,ro ${srwroot}
    fi

    verifyroot ${rootimg}

    # CONFIG_FEATURE_DEVFS must be disabled for BusyBox
    good_msg 'Mounting SquashFS filesystem'
    mount -r -t squashfs -o loop ${rootimg} ${slive}
    test_success 'mount compressed filesystem'

    [ -z "${param_toram}" ] || mount -o remount,rw ${srwroot}

    # Move boot mountpoint under live
    mount -o move ${sboot} ${mboot}
else
    # Treat boot mountpoint as live mountpoint
    verifyroot ${mediadev}
    mount -o move ${sboot} ${slive}
fi

# Bind extra live mountpoint under live
mount -r -o bind ${slive}   ${mlive}

# Move rwroot mountpoint under live
mount -o move    ${srwroot} ${mrwroot}


# Run debug shell again if requested
rundebugshell


good_msg 'Booting (initramfs)'

# Disable hotplugging and time change logging (hwclock starts before sysctl)
echo   > /proc/sys/kernel/hotplug
echo 0 > /proc/sys/kernel/grsecurity/timechange_logging
umount /sys  || bad_msg 'Failed to unmount /sys'
umount /proc || bad_msg 'Failed to unmount /proc'


cd ${slive}
mount -o move /dev ${slive}/dev
exec switch_root -c /dev/console ${slive} /sbin/init


# If we get here, something bad has happened
echo 'A fatal error has probably occured since /sbin/init did not'
echo 'boot correctly. Trying to open a shell...'
exec sh
