#!/bin/busybox ash

# Default variables
export PATH="/sbin:/bin"

CONSOLE=/dev/console
NORMAL="\033[0m"
WARN="\033[33;1m"
BAD="\033[31;1m"
BOLD="\033[1m"
GOOD="\033[32;1m"

RWROOT=/rwroot
ROROOT=${RWROOT}/mnt/cdrom
UNION=/union

. /etc/init.scripts
. /etc/modules.forced

splash() { return 0; }
[ -e /etc/init.splash ] && . /etc/init.splash


# Clean input/output
exec >${CONSOLE} <${CONSOLE} 2>&1


# Mount virtual filesystems
mkdir -p ${RWROOT} ${UNION}

mount -t proc  proc  /proc
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs ${RWROOT}

for mnt in /mnt /mnt/cdrom /mnt/livecd /mnt/hidden${RWROOT}; do
    mkdir -m 755 -p ${RWROOT}${mnt}
done
chmod 755 ${RWROOT}
chmod 700 ${RWROOT}/mnt/hidden


quiet_kmsg


CMDLINE=`cat /proc/cmdline`

CDROOT_TYPE=auto
CDROOT_FLAGS=noatime

for x in ${CMDLINE}; do
    case "${x}" in
        cdroot\=*)
            CDROOT_DEV=`parse_opt "${x}"`
        ;;
        cdroot_type\=*)
            CDROOT_TYPE=`parse_opt "${x}"`
        ;;
        cdroot_flags\=*)
            CDROOT_FLAGS=`parse_opt "${x}"`
        ;;
        loop\=*)
            LOOP=`parse_opt "${x}"`
        ;;
        debug)
            DEBUG=1
        ;;
    esac
done


splash init


good_msg 'Loading modules'

# Setup hotplugging before starting coldplugging
echo '/bin/busybox mdev' > /proc/sys/kernel/hotplug

oldmods=
newmods=" ${FORCE_LOAD} "
while [ "${oldmods}" != "${newmods}" ]; do
    for modalias in ${newmods}; do
        if ! echo "${oldmods}" | grep -q " ${modalias} "; then
            modprobe -q ${modalias} 2>/dev/null
        fi
    done

    oldmods="${newmods}"
    newmods=' '$(cat $(find /sys/devices -name modalias) | sort -u | tr '\n' ' ')
done

# Start device manager
mdev -s


# Run debug shell if requested
rundebugshell


good_msg "Looking for the media"

findmediamount() {
    local result= skip= bsn= dev=
    local devices="${CDROOT_DEV}" tested=' '
    if [ -z "${devices}" ]; then
        devices=`devicelist`
    fi

    while true; do
        for dev in ${devices}; do
            # Check for a block device to mount
            if [ -b "${dev}" ] && ! echo "${tested}" | grep -q " ${dev} "; then
                tested="${tested}${dev} "
                skip=0
                bsn=`basename ${dev}`

                # Skip if disk has at least one partition
                for part in `ls /sys/block/${bsn}/${bsn}[0-9]* 2>/dev/null`; do
                    skip=1
                    break;
                done
                if [ ${skip} = 1 ]; then
                    continue
                fi

                good_msg "Attempting to mount media: ${dev}"

                if mount -r -t ${CDROOT_TYPE} -o ${CDROOT_FLAGS} ${dev} ${ROROOT} >/dev/null 2>&1; then
                    # Check for the recognition file
                    if [ -e ${ROROOT}/"${LOOP}" ]; then
                        good_msg "Media found on ${dev}"
                        result=${dev}

                        break 2
                    else
                        umount ${ROROOT}
                    fi
                fi
            fi
        done

        # We don't have "udevadm settle" with mdev, so just loop
        warn_msg 'Searching for more devices ...'
        sleep 1; devices=`devicelist`
    done

    [ -n "${result}" ]
}

findmediamount || test_success "find media to mount"


# Setup the loopback mounts
if [ -n "${LOOP}" ]; then
    # CONFIG_FEATURE_DEVFS must be disabled for BusyBox
    good_msg 'Mounting squashfs filesystem'
    mount -r -t squashfs ${ROROOT}/"${LOOP}" ${RWROOT}/mnt/livecd
    test_success 'mount compressed filesystem'
else
    mount -o move ${ROROOT} ${RWROOT}/mnt/livecd
fi
ROROOT=${RWROOT}/mnt/livecd


good_msg "Creating union mount"
mount -t unionfs -o dirs=${RWROOT}=rw:${ROROOT}=ro unionfs ${UNION}
test_success 'create union mount'

# Move RWROOT submounts to UNION (will be then adjusted after switch_root)
for mnt in $(cut -d' ' -f2 /proc/mounts | sed -n "s:^${RWROOT}/:/:p"); do
    mount -o move ${RWROOT}${mnt} ${UNION}${mnt}
done

# Move the RWROOT mount to a hidden directory on UNION
# (rw layer directly accessible only by root)
mount -o move ${RWROOT} ${UNION}/mnt/hidden${RWROOT}


verbose_kmsg


good_msg 'Booting (initramfs)'
if [ ! -e ${UNION}/dev/console  -o  ! -e ${UNION}/dev/null ]; then
    bad_msg 'Real /dev is missing files required to boot (console and null)'
elif [ -e /etc/init.splash    -a  ! -e ${UNION}/dev/tty1 ]; then
    bad_msg 'Real /dev is missing tty1, which is required for splash'
fi


umount /sys  || bad_msg 'Failed to unmount /sys'
umount /proc || bad_msg 'Failed to unmount /proc'


cd ${UNION}
exec switch_root -c /dev/console ${UNION} /sbin/init


# If we get here, something bad has happened
splash verbose


echo 'A fatal error has probably occured since /sbin/init did not'
echo 'boot correctly. Trying to open a shell...'
echo
exec sh
