#!/bin/bash -e

hsversion=`cat ${HOME}/config/kversion`
kversion=${hsversion/-/-hardened-}
consolefont=ter-i16n.psf
lzmamem=20MiB
protected="/etc/._cfg????_locale.gen /etc/conf.d/._cfg????_clock /etc/._cfg????_eixrc"

pciids_regexp='^([[:xdigit:]]{4}|\t(\t[[:xdigit:]]{4} )?[[:xdigit:]]{4}|(C |\t\t?)[[:xdigit:]]{2})  [[:blank:][:graph:]]{0,320}$|^#[[:blank:][:graph:]]{0,320}$|^$'
usbids_regexp='^((AT|HID|R|BIAS|PHY|HUT|L|HCC|VT) |\t)[[:xdigit:]]{1,4}  [^[:cntrl:]]{0,320}$'


sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}

spatch() {
    local pname=$1; shift
    local pcat=cat
    if [ "${pname##*.}" = gz ]; then
        pcat=zcat
    fi

    # sed causes $?==0
    ${pcat} ${pname} | patch -Ns -r /tmp/patch-rejects "$@" | sed '/patch-rejects/d'
    rm -f /tmp/patch-rejects
}

rebuild_locales() {
    grep UTF-8 /usr/share/i18n/SUPPORTED > /etc/locale.gen.new
    if cmp -s /etc/locale.gen{.new,}; then
        rm /etc/locale.gen.new
    else
        sinfo "Rebuilding locales"
        mv /etc/locale.gen{.new,}
        locale-gen -q
    fi
}


# Sanity check
if [ ${PHASE} != src ]; then
    echo "This is phase [${PHASE}], run $0 in phase [src]."
    exit 1
fi


# Intentionally fail if there is there are multiple hardened profiles
sinfo "Setting a hardened profile"
hardened=`eselect profile list | awk '{ print $2 }' | grep '^hardened/'`
eselect profile set ${hardened}


if [ -x /usr/bin/gpg  -a  -x /usr/bin/eix ]; then
    sinfo "Updating portage"

    gpg -q --homedir /etc/portage/gnupg --import /usr/local/addons/keys/gentoo-*.asc
    eix-sync -qw -C -q
fi


if [ "$1" = fresh  -o  ! -d /usr/src/linux-${kversion} ]; then
    # Kernel sources should be present when sys-fs/udev is compiled
    # Maintainer note: after kernel update+compile, do
    # emerge -q1 dev-libs/klibc media-gfx/splashutils sys-apps/v86d
    sinfo "Downloading kernel ${kversion}"
    rm -rf /usr/src/linux-${kversion}
    emerge -q1 =sys-kernel/hardened-sources-${hsversion}
    cp ${HOME}/config/linux-${kversion%-*}.config /usr/src/linux/.config


    # Some news are delayed until first emerge
    eselect news read all
    eselect news purge


    sinfo "Downloading kernel patches"
    wget -N -q -P /usr/local/portage/distfiles `awk '/^# URL / { print $3 }' \
        ${HOME}/patches/kernel-patches.sha256`
    sha256sum --quiet -c ${HOME}/patches/kernel-patches.sha256


    sinfo "Applying kernel patches"
    spatch ${HOME}/patches/kernel-info.patch -p0
    sed -i 's/lzma -9/lzma/' /usr/src/linux/scripts/Makefile.lib

    spatch /usr/local/portage/distfiles/fbcondecor-0.9.6-2.6.31.2.patch     -d /usr/src/linux -p1
    spatch /usr/local/portage/distfiles/unionfs-2.5.7_for_2.6.32.25.diff.gz -d /usr/src/linux -p1
    # http://www.mail-archive.com/unionfs@mail.fsl.cs.sunysb.edu/msg03114.html
    spatch ${HOME}/patches/unionfs-unlink.patch -d /usr/src/linux -p4


    # Filter locales before remerging libc
    sinfo "Filtering locales"
    grep UTF-8 /usr/share/i18n/SUPPORTED > /etc/locale.gen


    sinfo "Recompiling toolchain"
    oldgcc=`find /var/db/pkg/sys-devel -maxdepth 1 -type d -name 'gcc-[0-9]*'`
    emerge -q1 sys-devel/binutils
    emerge -q1 sys-devel/gcc

    # consider removing old gcc only if it still exists after emerge
    # (emerge was in a new slot, or same version)
    if [ -e "${oldgcc}" ]; then
        chost=`portageq envvar CHOST`
        oldgccprof=`gcc-config -c`
        newgccprof=`find /etc/env.d/gcc -type f -name "${chost}-*"           \
            ! -name "${oldgccprof}" ! -name "${oldgccprof}-*" -printf '%f\n' \
            | sort | head -n 1`

        # unmerge only if the "new" gcc has a different version
        if [ -n "${newgccprof}" ]; then
            gcc-config "${newgccprof}"
            emerge -qC --deselect=n =sys-devel/`basename ${oldgcc}`
        fi
    fi
    env-update
    source /etc/profile

    emerge -q1 virtual/libc
    rm -f ${protected}


    sinfo "Removing unnecessary packages"
    emerge -qC --deselect=n "=dev-lang/python-3*"


    # Rely on timezone-data ebuild updating /etc/localtime
    sinfo "Compiling system"
    emerge -qepv system
    emerge -qe   system
    rm -f ${protected}
    rebuild_locales


    sinfo "Removing non-system packages"
    mv /var/lib/portage/world{,.off}
    echo sys-kernel/hardened-sources > /var/lib/portage/world
    emerge -qc
    mv /var/lib/portage/world{.off,}


    sinfo "Checking for non-rebuilt packages"
    orphans=`find /var/db/pkg -mindepth 3 -maxdepth 3 -name BUILD_TIME           \
        ! -path  /var/db/pkg/sys-kernel/hardened-sources-${hsversion}/BUILD_TIME \
        ! -newer /var/db/pkg/sys-kernel/hardened-sources-${hsversion}/BUILD_TIME \
        -printf '%h\n' | sed s:/var/db/pkg/:: | sort`
    if [ -n "${orphans}" ]; then
        sinfo "The following packages were not rebuilt"
        echo "${orphans}"
        exit 1
    fi


    # Shouldn't contain any rebuilds
    sinfo "Listing updates"
    emerge -qupvDN --with-bdeps y world

else
    sinfo "Skipping full rebuild (use \"fresh\")"
    sinfo "Listing updates"

    updlist=`mktemp`
    emerge -qupvDN --with-bdeps y --color y world | tee ${updlist}

    eselect news read all
    eselect news purge

    if [ -s ${updlist} ]; then
        echo -n "Press Enter to continue..."
        read
    fi

    rm ${updlist}
fi


sinfo "Compiling world"
emerge -quDN --with-bdeps y world


sinfo "Removing unnecessary packages"
emerge -qc --deselect=n


sinfo "Updating Perl modules"
perl-cleaner --ph-clean --modules -- -q


# sinfo "Updating Python modules"
# python-updater -dmanual -- -q


sinfo "Checking linking consistency"
revdep-rebuild -qi

rm -f ${protected}
etc-update
rebuild_locales


sinfo "Compiling custom executables"
gcc -o /usr/local/sbin/udev-watchdog /usr/local/src/udev-watchdog.c \
    `portageq envvar CFLAGS` `portageq envvar LDFLAGS` -ludev
gcc -o /usr/local/bin/log-limit      /usr/local/src/log-limit.c     \
    `portageq envvar CFLAGS` `portageq envvar LDFLAGS`

strip -s /usr/local/sbin/udev-watchdog
strip -s /usr/local/bin/log-limit

# s/AD/Andorra/;...
ccrep=`awk -F '\t' '!/^#/ { printf "s/^%s\\\\>/\"%s\"/;", $1, $2 }' /usr/share/zoneinfo/iso3166.tab`
# s:__aa_DJ :"Afar language locale for Djibouti (Cadu/Laaqo Dialects)" :;...
lcrep=`awk '/^[[:blank:]]*title\y/ { match(FILENAME, /(.*\/)?(.*)/, a); match($0, /^[[:blank:]]*title[[:blank:]]+(.*)/, b); printf "s:__%s :%s :;", a[2], gensub(/\.\"$/, "\"", 1, b[1]); nextfile }' /usr/share/i18n/locales/*`
# "Spain" ca "__ca_ES@valencia" ca_ES.UTF-8@valencia (+ lcrep)
awk '/UTF-8/ && !/^iw_IL/ { match($1, /^([a-z]+)_([A-Z]+)\y(.*@([^.]*))?/, a); printf "%s %s ", a[2], "__" a[1] "_" a[2] (a[4]=="" ? "" : "@" a[4]); print $1 }' /usr/share/i18n/SUPPORTED | sed "${ccrep}${lcrep}" | LC_ALL=C sort | tr '\n' ' ' > /etc/locale.menu
# "Antarctica" Antarctica/McMurdo "McMurdo Station, Ross Island"
awk -F '\t' '!/^#/ { printf "%s %s \"%s\"\n", $1, $3, $4 }' /usr/share/zoneinfo/zone.tab | sed "${ccrep}" | LC_ALL=C sort | tr '\n' ' ' > /etc/timezone.menu


sinfo "Selectively disabling PAX"
paxctl -m /usr/bin/mplayer


sinfo "Configuring fontconfig"
for fconf in \
    10-no-sub-pixel.conf \
    20-unhint-small-dejavu-sans.conf \
    20-unhint-small-dejavu-sans-mono.conf \
    20-unhint-small-dejavu-serif.conf \
    44-wqy-zenhei.conf \
    57-dejavu-sans.conf \
    57-dejavu-sans-mono.conf \
    57-dejavu-serif.conf \
    65-culmus.conf \
    65-khmer.conf \
    65-ttf-thai-tlwg.conf \
    70-no-bitmaps.conf
do
    if [ ! -f /etc/fonts/conf.d/${fconf} ]; then
        eselect fontconfig enable ${fconf}
    fi
done

# Ghostscript has its urw-fonts dependency stripped
if [ -e /usr/share/fonts/default ]; then
    rm    /usr/share/fonts/default/ghostscript
    rmdir /usr/share/fonts/default
fi


sinfo "Updating PCI and USB lists"

sed -i '/^PCI_COMPRESSED_IDS=1$/d; s/^\(DEST=.*\)\.gz$/\1/' /usr/sbin/update-pciids
update-pciids -q

rm -f /usr/share/misc/usb.ids.gz
update-usbids -q

if [ ! -e /usr/share/misc/pci.ids  -o  ! -e /usr/share/misc/usb.ids ]; then
    sinfo "Do PCI/USB IDs lists use compressed format exclusively?"
    exit 1
fi


sinfo "Verifying PCI and USB lists"
LC_ALL=C awk --posix "! /${pciids_regexp}/                  { print; exit 1 }" /usr/share/misc/pci.ids
LC_ALL=C awk --posix "! /${pciids_regexp}|${usbids_regexp}/ { print; exit 1 }" /usr/share/misc/usb.ids


# /usr/local/share/ca-certificates is implicitly trusted
sinfo "Refreshing trusted CA certificates list"
update-ca-certificates --fresh


sinfo "Generating /etc/issue"
sed "s@VERSION@${VERSION}@" ${HOME}/config/issue > /etc/issue


sinfo "Patching init scripts"
initpatches="genkernel checkroot rc inittab iptables smartd"
for p in ${initpatches}; do
    spatch ${HOME}/patches/${p}.patch -p0
done
sed -i 's/^# include /include /' /etc/nanorc


sinfo "Configuring start-up services"
bootsvc="microcode_ctl metalog iptables consolekit alsasound"
defaultsvc="liberte acpid rngd laptop_mode gpm smartd bluetooth pcscd nscd fbcondecor autofs NetworkManager privoxy"
delsvc="rmnologin netmount local"

for svc in ${bootsvc}; do
    rc-update add ${svc} boot
done
for svc in ${defaultsvc}; do
    rc-update add ${svc} default
done
for svc in ${delsvc}; do
    rc-update del ${svc}
done
depscan.sh


# (lastlog is not sparse on unionfs, wtmp has no growth limit)
sinfo "Disabling non-rotating logs"
ln -sf /dev/null /var/log/ConsoleKit/history
ln -sf /dev/null /var/log/lastlog
rm -f  /var/log/wtmp


# Root password good for maintenance before /etc/init.d/local.start is in charge
# "grpck -r" fails during early emerge shadow because of user "games" in /etc/group
# "wheel"   group: necessary for su/sudo PAM authentication
# "users"   group: some apps require for DBUS communication
# "plugdev" group: changing NetworkManager settings via DBUS
# "audio"   group: ALSA/OSS devices access
# "video"   group: V4L2 devices access (webcam - mplayer tv://)
# "cdrom"   group: raw CD devices access (cd playing + cd/dvd writing)
# "lp"      group: printing subsystem access (CUPS; DBUS comm. with bluetoothd)
# "games"   group: prevent games complaining about not keeping scores
sinfo "Setting up users"
sed -i 's/^#\?\(ENCRYPT_METHOD\) .*/\1 SHA256/' /etc/login.defs

pwconv
pwck -qr

groupdel smmsp || [ $? = 6 ]
grpck -r
grpconv

echo root:liberte | chpasswd

groupadd -f -r games
groupadd -f -r plugdev
groupadd -g 9000 legion || [ $? = 9 ]
groupadd -g 9001 nofw   || [ $? = 9 ]

useradd -u 2101 -g legion -c "Anonymous"      -d /home/anon                  anon || [ $? = 9 ]
useradd -u 2102 -g nofw   -c "Non-firewalled" -d /home/nofw -s /sbin/nologin nofw || [ $? = 9 ]

usermod -G wheel,users,plugdev,audio,video,cdrom,lp,games anon

useradd -c nscd    -d /dev/null -s /sbin/nologin -r nscd || [ $? = 9 ]
useradd -c htpdate -d /dev/null -s /sbin/nologin -r htp  || [ $? = 9 ]


sinfo "Initializing a secondary PGP keyring"
sudo -n -u anon touch     /home/anon/persist/security/pgp/liberte.gpg
sudo -n -u anon chmod 600 /home/anon/persist/security/pgp/liberte.gpg
sudo -n -u anon gpg -q --homedir /home/anon/persist/security/pgp \
    --primary-keyring liberte.gpg --import /usr/local/addons/keys/liberte-*.asc
sudo -n -u anon cp -p /usr/local/addons/keys/mfpl.crt /home/anon/persist/security/pgp
sudo -n -u anon chmod 600 /home/anon/persist/security/pgp/mfpl.crt


sinfo "Installing wrappers"
mv -n /sbin/iwconfig{,.orig}
ln -sf iwconfig.wrapper /sbin/iwconfig


sinfo "Compiling kernel"
genkflags="--splash=liberte --no-keymap --oldconfig --no-save-config --loglevel=0"
sed -i 's/^DISKLABEL="yes"/DISKLABEL="no"/' /etc/genkernel.conf

# Use MODULES_ISCSI for virtio, so as not to modify initrd.defaults
export KBUILD_BUILD_VERSION=0
export AMODULES_FS="vfat fat nls_utf8 nls_cp437 nls_iso8859-1 loop squashfs unionfs"
export AMODULES_PCMCIA="mmc_core mmc_block"
export AMODULES_ISCSI="virtio_blk virtio virtio_pci virtio_ring"
#export AMODULES_FIREWIRE="firewire-ohci firewire-sbp2"
sed -i 's/^MODULES_\(DMRAID\|EVMS\|LVM\|MDADM\|NET\|FS\|FIREWIRE\)=/#\0/' \
    /usr/share/genkernel/arch/x86/modules_load

genkernel ${genkflags} all


sinfo "Adding uvesafb support to initrd"
cpiodir=`mktemp -d`
mkdir ${cpiodir}/cpio

# Also add the alternative splash theme (genkernel can copy only one)
/usr/src/linux/usr/gen_init_cpio /usr/share/v86d/initramfs \
    | (cd ${cpiodir}/cpio; cpio -im --sparse --no-absolute-filenames -f dev/console dev/tty1)
mkdir -p ${cpiodir}/cpio/etc/splash
cp -pr /etc/splash/liberty ${cpiodir}/cpio/etc/splash/
/bin/gzip -cd /boot/initramfs-genkernel-x86-${kversion} > ${cpiodir}/initramfs
find ${cpiodir}/cpio -not -type d -o -name root -o -path '*/etc/splash/*' \
    | sed "s@^${cpiodir}/cpio/@@" \
    | (cd ${cpiodir}/cpio; cpio -oA -H newc -O ${cpiodir}/initramfs)

# "lzma -e" is not supported by the kernel (likely because lc bits > 3)
lzma -c ${cpiodir}/initramfs > /boot/initramfs-genkernel-x86-${kversion}
rm -r ${cpiodir}


sinfo "Verifying LZMA decompression memory requirements"
kernlzma=/usr/src/linux/arch/x86/boot/compressed/vmlinux.bin.lzma
head -c $[`du -b ${kernlzma} | cut -f1` - 4] ${kernlzma} | lzma -t -M ${lzmamem}
lzma -t -M ${lzmamem} /boot/initramfs-genkernel-x86-${kversion}


sinfo "Kernel config differences:"
diff ${HOME}/config/linux-${kversion%-*}.config /usr/src/linux/.config || true


sinfo "Cleaning modules directory"
rm /lib/modules/*/{build,source}


sinfo "Generating SYSLINUX configuration"
rm -f /boot/boot /boot/System.map-genkernel-x86-${kversion}

mv /boot/kernel-genkernel-x86-${kversion}    /boot/kernel-x86.zi
mv /boot/initramfs-genkernel-x86-${kversion} /boot/initrd-x86.lzm

mkdir -p /boot/syslinux
cp -p /usr/share/syslinux/{syslinux.exe,{menu,chain,hdt,reboot}.c32} /boot/syslinux/
cp -p /usr/share/consolefonts/${consolefont}.gz /boot/syslinux/
rm -f /boot/syslinux/${consolefont}
gunzip /boot/syslinux/${consolefont}.gz

cat ${HOME}/config/syslinux.cfg \
    | sed "/^#/d ;
           s@PREFIX@/liberte@ ;
           s@VERSION@${VERSION}@ ;
           s@CONSOLEFONT@${consolefont}@" \
    | iconv -f UTF-8 -t CP437 \
    > /boot/syslinux/syslinux.cfg


sinfo "Done."
