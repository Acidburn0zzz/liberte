#!/bin/bash -e

helpdir=${HOME}/helpers

hsversion=`cat ${HOME}/config/kversion`
kversion=${hsversion/-/-hardened-}
xzmem=20

protected="/etc/._cfg????_locale.gen"

i2phosts=https://www.i2p2.de/hosts.txt


sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}

spatch() {
    local pname=$1; shift
    local pcat=cat
    local revok=

    if [ "${pname##*.}" = gz ]; then
        pcat=zcat
    fi

    revres=0
    ${pcat} ${pname} | patch --dry-run -R -Ns -r /tmp/patch-rejects "$@" 1>/dev/null || revres=$?

    if ${pcat} ${pname} | patch -Ns -r /tmp/patch-rejects "$@" 1>/dev/null; then
        echo "Successfully applied patch: ${pname}"
    else
        if [ ${revres} != 0 ]; then
            echo "Failed to apply patch: ${pname}"
            return 1
        else
            echo "Patch already applied: ${pname}"
        fi
    fi
    rm -f /tmp/patch-rejects
}

rebuild_locales() {
    grep UTF-8 /usr/share/i18n/SUPPORTED > /etc/locale.gen.new
    if cmp -s /etc/locale.gen{.new,}; then
        rm /etc/locale.gen.new
    else
        sinfo "Rebuilding locales"
        mv /etc/locale.gen{.new,}
        locale-gen -q
    fi
}


# Sanity check
if [ ${PHASE} != src ]; then
    echo "This is phase [${PHASE}], run $0 in phase [src]."
    exit 1
fi


# Intentionally fail if there is there are multiple hardened profiles
sinfo "Setting a hardened profile"
hardened=`eselect profile list | awk '{ print $2 }' | grep '^hardened/' | grep -v /selinux`
eselect profile set ${hardened}

echo ">sys-kernel/hardened-sources-${hsversion}" > /etc/portage/package.mask/kernel
rm -f /etc/portage/savedconfig/*/*-[0-9]*


if [ -x /usr/bin/gpg  -a  -x /usr/bin/eix ]; then
    sinfo "Updating portage"

    gpg -q --homedir /etc/portage/gnupg --import /usr/local/addons/keys/gentoo-*.asc
    eix-sync -qw -C -q
fi


sinfo "Applying temporary portage patches"
ovt=/usr/portage/app-emulation/open-vm-tools-kmod
ovtv=open-vm-tools-kmod-2011.11.20.535097
rsync -t --chmod=u=rwX,go=rX ${HOME}/patches/portage/vmci-driver.patch ${ovt}/files/
chown -R --from=root:root portage:portage ${ovt}/files
if [ ! -e ${ovt}/${ovtv}-r1.ebuild ]; then
    cp -a ${ovt}/${ovtv}{,-r1}.ebuild
    sed -i 's:src_prepare() {:&\n\tepatch "${FILESDIR}"/vmci-driver.patch:' \
        ${ovt}/${ovtv}-r1.ebuild
fi
ebuild ${ovt}/${ovtv}-r1.ebuild manifest

vvb=/usr/portage/x11-drivers/xf86-video-virtualbox
vvbv=xf86-video-virtualbox-4.1.4
spatch ${HOME}/patches/portage/xf86-video-virtualbox-3-localconfig.patch -p0
chown --from=root:portage portage:portage ${vvb}/files/xf86-video-virtualbox-3-localconfig
ebuild ${vvb}/${vvbv}.ebuild manifest

# (#401127)
sut=/usr/portage/media-gfx/splashutils/splashutils-1.5.4.4.ebuild
spatch ${HOME}/patches/portage/splashutils.patch -p0
ebuild ${sut} manifest


if [ "$1" = fresh  -o  ! -e /usr/src/linux-${kversion}/incremental ]; then
    # Kernel sources should be present when sys-fs/udev is compiled
    # Maintainer note: after non-fresh kernel update+compile, do
    # emerge -q1 dev-libs/klibc media-gfx/splashutils sys-apps/v86d
    #            app-emulation/{open-vm-tools-kmod,virtualbox-guest-additions}
    sinfo "Downloading kernel ${kversion}"
    rm -rf /usr/src/linux-${kversion} /lib/modules
    emerge -q1 =sys-kernel/hardened-sources-${hsversion}


    sinfo "Cloning kernel to ${kversion}-kexec{,-64}"
    rsync -aHS --delete-excluded /usr/src/linux-${kversion}/ /usr/src/linux-kexec
    rsync -aHS --delete-excluded /usr/src/linux-${kversion}/ /usr/src/linux-kexec-64

    cp ${HOME}/config/linux-${kversion%-*}.config          /usr/src/linux/.config
    cp ${HOME}/config/linux-${kversion%-*}-kexec.config    /usr/src/linux-kexec/.config
    cp ${HOME}/config/linux-${kversion%-*}-kexec-64.config /usr/src/linux-kexec-64/.config


    sinfo "Downloading kernel patches"
    wget -N -q -P /usr/local/portage/distfiles `awk '/^# URL / { print $3 }' \
        ${HOME}/patches/kernel-patches.sha256`
    sha256sum --quiet -c ${HOME}/patches/kernel-patches.sha256


    sinfo "Applying kernel patches"
    spatch /usr/local/portage/distfiles/fbcondecor-0.9.6-3.0-rc2.patch   -d /usr/src/linux -p1
    spatch /usr/local/portage/distfiles/unionfs-2.5.10_for_3.0.4.diff.gz -d /usr/src/linux -p1


    # Filter locales before remerging libc
    sinfo "Filtering locales"
    grep UTF-8 /usr/share/i18n/SUPPORTED > /etc/locale.gen


    # Some news are delayed until first emerge
    eselect news read all
    eselect news purge


    sinfo "Recompiling toolchain"
    oldgcc=`find /var/db/pkg/sys-devel -maxdepth 1 -type d -name 'gcc-[0-9]*'`
    emerge -q1 sys-devel/binutils
    emerge -q1 sys-devel/gcc

    # consider removing old gcc only if it still exists after emerge
    # (emerge was in a new slot, or same version)
    if [ -e "${oldgcc}" ]; then
        chost=`portageq envvar CHOST`
        oldgccprof=`gcc-config -c`
        newgccprof=`find /etc/env.d/gcc -type f -name "${chost}-*"           \
            ! -name "${oldgccprof}" ! -name "${oldgccprof}-*" -printf '%f\n' \
            | sort | head -n 1`

        # unmerge only if the "new" gcc has a different version
        if [ -n "${newgccprof}" ]; then
            gcc-config "${newgccprof}"
            emerge -qC --deselect=n =sys-devel/`basename ${oldgcc}`
        fi
    fi
    env-update
    source /etc/profile

    # necessary after gcc upgrades
    emerge -q1 sys-devel/libtool

    emerge -q1 sys-libs/glibc
    rm -f ${protected}


    sinfo "Removing unnecessary packages"
    python2=`eselect python list | awk '{ print $2 }' | grep '^python2\.'`
    eselect python set ${python2}

    emerge -qC --deselect=n "=dev-lang/python-3*"


    # Rely on timezone-data ebuild updating /etc/localtime
    sinfo "Compiling system"
    emerge -qepv @system
    emerge -qe   @system
    rm -f ${protected}
    rebuild_locales


    sinfo "Removing non-system packages"
    mv /var/lib/portage/world{,.off}
    echo sys-kernel/hardened-sources > /var/lib/portage/world
    emerge -qc
    mv /var/lib/portage/world{.off,}


    sinfo "Checking for non-rebuilt packages"
    orphans=`find /var/db/pkg -mindepth 3 -maxdepth 3 -name BUILD_TIME           \
        ! -path  /var/db/pkg/sys-kernel/hardened-sources-${hsversion}/BUILD_TIME \
        ! -newer /var/db/pkg/sys-kernel/hardened-sources-${hsversion}/BUILD_TIME \
        -printf '%h\n' | sed s:/var/db/pkg/:: | sort`
    if [ -n "${orphans}" ]; then
        sinfo "The following packages were not rebuilt"
        echo "${orphans}"
        exit 1
    fi


    # "make prepare" suffices for xf86-input-virtualbox, but not for xf86-video-virtualbox
    sinfo "Compiling kernel"
    ${helpdir}/gen-kernel main


    sinfo "Marking tree as ready for incremental builds"
    touch /usr/src/linux-${kversion}/incremental


    # Shouldn't contain any rebuilds
    sinfo "Listing updates"
    emerge -qupvDN --with-bdeps y @world

else
    sinfo "Skipping full rebuild (use \"fresh\")"
    sinfo "Listing updates"

    updlist=`mktemp`
    emerge -qupvDN --with-bdeps y --color y @world | tee ${updlist}

    if [ -s ${updlist} ]; then
        echo -n "Press Enter to continue..."
        read
    fi

    rm ${updlist}
fi


sinfo "Compiling world"
emerge -quDN --with-bdeps y @world


# Some news are delayed until first emerge
eselect news read all
eselect news purge


sinfo "Removing unnecessary packages"
emerge -qc --deselect=n


sinfo "Updating Perl modules"
perl-cleaner --ph-clean --modules -- -q


# sinfo "Updating Python modules"
# python-updater -dmanual -- -q


sinfo "Checking linking consistency"
revdep-rebuild -qi

rm -f ${protected}
etc-update
rebuild_locales


sinfo "Listing GLSAs"
glsa-check -lq


if [ ! -e /var/cache/eix ]; then
    sinfo "Creating eix database"
    eix-update -q
fi


sinfo "Compiling custom executables"
mkdir -p /usr/lib/xchat/plugins

cflags="-std=c99 -Wall -pedantic `portageq envvar CFLAGS` `portageq envvar LDFLAGS`"
gcc  ${cflags} -o /usr/local/sbin/udev-watchdog      /usr/local/src/udev-watchdog.c -ludev
gcc  ${cflags} -o /usr/local/sbin/slay               /usr/local/src/slay.c
gcc  ${cflags} -o /usr/local/bin/log-limit           /usr/local/src/log-limit.c
gcc  ${cflags} -o /usr/lib/xchat/plugins/cap_sasl.so /usr/local/src/cap_sasl.c -shared -fPIC \
     -D _GNU_SOURCE -I /usr/include/glib-2.0 -I /usr/lib/glib-2.0/include -Wl,--export-dynamic
               
cflags="-Wall `portageq envvar CFLAGS`"
mkdir -p /usr/local/addons/initrd
klcc ${cflags} -o /usr/local/addons/initrd/init-kexec /usr/local/src/init-kexec.c

strip -s /usr/local/sbin/udev-watchdog       \
         /usr/local/sbin/slay                \
         /usr/local/bin/log-limit            \
         /usr/local/addons/initrd/init-kexec \
         /usr/lib/xchat/plugins/cap_sasl.so


sinfo "Generating localization, timezone and keyboard layout menus"
${helpdir}/gen-locale-menu


# midori, totem: ffmpeg, ffmpegscale
# jamvm: signal handling by libwrapper.so
# fuser: (#394443)
sinfo "Selectively disabling PAX"
paxctl -m /usr/bin/midori /usr/bin/totem* /usr/bin/mpg123 /usr/bin/jamvm /bin/fuser


# No sub-pixel rendering, since LCD / cable type is unknown
sinfo "Configuring fontconfig"
for fconf in \
    10-no-sub-pixel.conf \
    20-unhint-small-dejavu-sans.conf \
    20-unhint-small-dejavu-sans-mono.conf \
    20-unhint-small-dejavu-serif.conf \
    44-wqy-zenhei.conf \
    57-dejavu-sans.conf \
    57-dejavu-sans-mono.conf \
    57-dejavu-serif.conf \
    65-khmer.conf \
    64-ttf-thai-tlwg.conf \
    70-no-bitmaps.conf
do
    if [ ! -f /etc/fonts/conf.d/${fconf} ]; then
        eselect fontconfig enable ${fconf}
    fi
done

# Ghostscript has its urw-fonts dependency stripped
if [ -e /usr/share/fonts/default ]; then
    rm    /usr/share/fonts/default/ghostscript
    rmdir /usr/share/fonts/default
fi


# http://www.x.org/wiki/GalliumStatus
sinfo "Configuring Mesa, OpenGL and XvMC"
# for mfam in r300 r600; do
#     eselect mesa set ${mfam} gallium
# done
eselect mesa   set --auto
eselect opengl set xorg-x11
eselect xvmc   set xorg-x11


# The piciids/usbids sites are notorious for various failures
sinfo "Updating PCI, USB, SMART and I2P hosts databases"

sed -i '/^PCI_COMPRESSED_IDS=1$/d; s/^\(DEST=.*\)\.gz$/\1/' /usr/sbin/update-pciids
update-pciids -q     || echo "update-pciids failed (ignoring)"

rm -f /usr/share/misc/usb.ids.gz
update-usbids -q     || echo "update-usbids failed (ignoring)"

update-smart-drivedb || echo "update-smart-drivedb failed (ignoring)"

if [ ! -e /usr/share/misc/pci.ids  -o  ! -e /usr/share/misc/usb.ids ]; then
    sinfo "Do PCI/USB IDs lists use compressed format exclusively?"
    exit 1
fi

# zzz @ #i2p-dev: hosts.txt in the source tree is the same or newer
if wget -nv -O /opt/i2p/hosts.txt.new ${i2phosts}; then
    mv /opt/i2p/hosts.txt{.new,}
else
    echo "I2P hosts.txt update failed (ignoring)"
    rm -f /opt/i2p/hosts.txt.new
fi


sinfo "Verifying PCI, USB, SMART and I2P hosts databases"
${helpdir}/vfy-databases


sinfo "Creating initial netDb for I2P"
${helpdir}/gen-netdb


# /usr/local/share/ca-certificates is implicitly trusted
sinfo "Refreshing trusted certificates list"
find -L /etc/ssl/certs -maxdepth 1 -type l -delete
update-ca-certificates -f


sinfo "Generating /etc/issue"
sed "s@VERSION@${LVERSION}@" ${HOME}/config/issue > /etc/issue


sinfo "Patching init scripts"
initpatches="inittab iptables htpdate"
for p in ${initpatches}; do
    spatch ${HOME}/patches/${p}.patch -p0
done
sed -i 's/^# include /include /' /etc/nanorc


sinfo "Configuring start-up services"
svcsysinit="udev"
svcboot="consolefont irqbalance haveged metalog
         iptables consolekit alsasound fbcondecor lockdown"
svcdefault="liberte identity cabled persist xconfig vmconfig spindown tordate
            acpid smartd laptop_mode gpm
            nscd autofs NetworkManager privoxy
            nginx spawn-fcgi.cable udev-postmount"
delsvcboot="urandom swap bootmisc root mtab"
delsvcdefault="netmount local"
delsvcshutdown="savecache"

for runlevel in sysinit boot default; do
    eval svcs=\${svc${runlevel}}
    for svc in ${svcs}; do
        [   -e /etc/runlevels/${runlevel}/${svc} ] || rc-update add ${svc} ${runlevel}
    done
done

for runlevel in boot default shutdown nonetwork; do
    eval svcs=\${delsvc${runlevel}}
    for svc in ${svcs}; do
        [ ! -e /etc/runlevels/${runlevel}/${svc} ] || rc-update del ${svc} ${runlevel}
    done
done

rc-update -u


# (lastlog is not sparse on unionfs, wtmp has no growth limit)
sinfo "Disabling non-rotating logs"
ln -sf /dev/null /var/log/ConsoleKit/history
ln -sf /dev/null /var/log/lastlog
rm -f  /var/log/wtmp


# Root password good for maintenance before /etc/init.d/local.start is in charge
# "grpck -r" fails during early emerge shadow because of user "games" in /etc/group
# "wheel"     group: necessary for su/sudo PAM authentication + GRSEC TPE (= 10)
# "users"     group: some apps require for DBUS communication
# "plugdev"   group: changing NetworkManager (and ModemManager) settings via DBUS; MTP protocol
# "audio"     group: ALSA/OSS devices access
# "video"     group: V4L2 devices access (webcam - mplayer tv://)
# "cdrom"     group: raw CD devices access (cd playing + cd/dvd writing)
# "lp"        group: printing subsystem access (CUPS; DBUS comm. with bluetoothd)
# "uucp"      group: access to rfcomm (e.g., obexftp)
# "games"     group: prevent games complaining about not keeping scores
# "vmware"    group: VMware's drag-n-drop feature for file exchange (when enabled)
# "vboxguest" group: VirtualBox seamless mode, auto-resize and clipboard
sinfo "Setting up users"
sed -i 's/^#\?\(ENCRYPT_METHOD\) .*/\1 SHA256/' /etc/login.defs

pwconv
pwck -qr

grpck -r
grpconv

echo root:liberte | chpasswd

groupadd -f -r games
groupadd -f -r plugdev
groupadd -g 9000 legion || [ $? = 9 ]
groupadd -g 9001 nofw   || [ $? = 9 ]

useradd -u 2101 -g legion -c "Anonymous"            -d /home/anon                  anon  || [ $? = 9 ]
useradd -u 2102 -g nofw   -c "Non-firewalled"       -d /home/nofw -s /sbin/nologin nofw  || [ $? = 9 ]

usermod -G wheel,users,plugdev,audio,video,cdrom,lp,uucp,games,vmware,vboxguest anon
usermod -G legion                                                               cable

useradd -c nscd    -d /dev/null -s /sbin/nologin -r nscd || [ $? = 9 ]
useradd -c htpdate -d /dev/null -s /sbin/nologin -r htp  || [ $? = 9 ]
useradd -c slay    -d /dev/null -s /sbin/nologin -r slay || [ $? = 9 ]

for uid in i2p nginx; do
    touch               /tmp/${uid}-ref
    chown ${uid}:${uid} /tmp/${uid}-ref
done


sinfo "Initializing a secondary PGP keyring"
sudo -n -u anon gpg -q --homedir /home/anon/persist/security/pgp --no-default-keyring \
    --keyring liberte.gpg --import /usr/local/addons/keys/liberte-*.asc
install -p -o anon -g legion -m 600 -t /home/anon/persist/security/pgp \
    /usr/local/addons/keys/mfpl.crt

# clear pam_mktemp's append-only attribute to allow later livecd directory removal
chattr -f -a /tmp/.private || :


sinfo "Installing wrappers"
ln -sf ../local/libexec/vmmouse_detect.wrapper /usr/bin/vmmouse_detect


sinfo "Compiling main and KEXEC kernels"
${helpdir}/gen-kernel


sinfo "Creating initramfs image"
${helpdir}/gen-initramfs


sinfo "Creating kexec initramfs image"
/usr/src/linux-kexec/usr/gen_init_cpio ${HOME}/initrd/initramfs-kexec \
    | xz -c -C crc32 > /usr/local/boot/initrd-kexec.xz


sinfo "Verifying XZ decompression memory requirements"
kernxz=arch/x86/boot/compressed/vmlinux.bin.xz

head -c -4 /usr/src/linux/${kernxz}          | xz -t -M $((2 * ${xzmem}))MiB
xz -t -M ${xzmem}MiB /boot/initrd-x86.xz

head -c -4 /usr/src/linux-kexec/${kernxz}    | xz -t -M $((2 * ${xzmem}))MiB
head -c -4 /usr/src/linux-kexec-64/${kernxz} | xz -t -M $((2 * ${xzmem}))MiB
xz -t -M ${xzmem}MiB /usr/local/boot/initrd-kexec.xz


sinfo "Kernel config differences:"
diff ${HOME}/config/linux-${kversion%-*}.config          /usr/src/linux/.config          || :


sinfo "Kexec kernel config differences:"
diff ${HOME}/config/linux-${kversion%-*}-kexec.config    /usr/src/linux-kexec/.config    || :
diff ${HOME}/config/linux-${kversion%-*}-kexec-64.config /usr/src/linux-kexec-64/.config || :


if [ -e /etc/portage/savedconfig/sys-apps/busybox-* ]; then
    sinfo "BusyBox config differences:"
    diff /etc/portage/savedconfig/sys-apps/busybox{,-*} || :
fi


sinfo "Unknown missing firmwares:"
${helpdir}/lst-firmwares


sinfo "Generating SYSLINUX configuration"
${helpdir}/gen-syslinux


sinfo "Done."
