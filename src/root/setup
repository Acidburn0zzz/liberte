#!/bin/bash -e

hsversion=`cat ${HOME}/config/kversion`
kversion=${hsversion/-/-hardened-}
consolefont=ter-i16n.psf
xzmem=20
protected="/etc/._cfg????_locale.gen"

i2phosts=http://www.i2p2.de/hosts.txt

pciids_regexp='^([[:xdigit:]]{4}|\t(\t[[:xdigit:]]{4} )?[[:xdigit:]]{4}|(C |\t\t?)[[:xdigit:]]{2})  [^[:cntrl:]]{0,320}$|^#[[:blank:][:graph:]]{0,320}$|^$'
usbids_regexp='^((AT|HID|R|BIAS|PHY|HUT|L|HCC|VT) |\t)[[:xdigit:]]{1,4}  [^[:cntrl:]]{0,320}$'
i2phosts_regexp='^[[:alnum:].-]{1,63}.i2p=[[:alnum:]~-]{512}AAAA[[:blank:]]?$'


sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}

spatch() {
    local pname=$1; shift
    local pcat=cat
    local revok=

    if [ "${pname##*.}" = gz ]; then
        pcat=zcat
    fi

    revres=0
    ${pcat} ${pname} | patch --dry-run -R -Ns -r /tmp/patch-rejects "$@" 1>/dev/null || revres=$?

    if ${pcat} ${pname} | patch -Ns -r /tmp/patch-rejects "$@" 1>/dev/null; then
        echo "Successfully applied patch: ${pname}"
    else
        if [ ${revres} != 0 ]; then
            echo "Failed to apply patch: ${pname}"
            return 1
        else
            echo "Patch already applied: ${pname}"
        fi
    fi
    rm -f /tmp/patch-rejects
}

rebuild_locales() {
    grep UTF-8 /usr/share/i18n/SUPPORTED > /etc/locale.gen.new
    if cmp -s /etc/locale.gen{.new,}; then
        rm /etc/locale.gen.new
    else
        sinfo "Rebuilding locales"
        mv /etc/locale.gen{.new,}
        locale-gen -q
    fi
}


# Sanity check
if [ ${PHASE} != src ]; then
    echo "This is phase [${PHASE}], run $0 in phase [src]."
    exit 1
fi


# Intentionally fail if there is there are multiple hardened profiles
sinfo "Setting a hardened profile"
hardened=`eselect profile list | awk '{ print $2 }' | grep '^hardened/' | grep -v /selinux`
eselect profile set ${hardened}
rm -f /etc/portage/savedconfig/sys-apps/busybox-*


if [ -x /usr/bin/gpg  -a  -x /usr/bin/eix ]; then
    sinfo "Updating portage"

    gpg -q --homedir /etc/portage/gnupg --import /usr/local/addons/keys/gentoo-*.asc
    eix-sync -qw -C -q
fi


if [ "$1" = fresh  -o  ! -e /usr/src/linux-${kversion}/incremental ]; then
    # Kernel sources should be present when sys-fs/udev is compiled
    # Maintainer note: after non-fresh kernel update+compile, do
    # emerge -q1 dev-libs/klibc media-gfx/splashutils sys-apps/v86d
    sinfo "Downloading kernel ${kversion}"
    rm -rf /usr/src/linux-${kversion} /lib/modules
    emerge -q1 =sys-kernel/hardened-sources-${hsversion}

    spatch ${HOME}/patches/kernel-info.patch -p0


    sinfo "Cloning kernel to ${kversion}-kexec"
    rsync -aHS --delete-excluded /usr/src/linux-${kversion}/ /usr/src/linux-kexec

    cp ${HOME}/config/linux-${kversion%-*}.config       /usr/src/linux/.config
    cp ${HOME}/config/linux-${kversion%-*}-kexec.config /usr/src/linux-kexec/.config


    sinfo "Downloading kernel patches"
    wget -N -q -P /usr/local/portage/distfiles `awk '/^# URL / { print $3 }' \
        ${HOME}/patches/kernel-patches.sha256`
    sha256sum --quiet -c ${HOME}/patches/kernel-patches.sha256


    sinfo "Applying kernel patches"
    spatch /usr/local/portage/distfiles/fbcondecor-0.9.6-3.0-rc2.patch       -d /usr/src/linux -p1
    spatch /usr/local/portage/distfiles/unionfs-2.5.9.2_for_2.6.39.2.diff.gz -d /usr/src/linux -p1


    # Filter locales before remerging libc
    sinfo "Filtering locales"
    grep UTF-8 /usr/share/i18n/SUPPORTED > /etc/locale.gen


    # Some news are delayed until first emerge
    eselect news read all
    eselect news purge


    sinfo "Recompiling toolchain"
    oldgcc=`find /var/db/pkg/sys-devel -maxdepth 1 -type d -name 'gcc-[0-9]*'`
    emerge -q1 sys-devel/binutils
    emerge -q1 sys-devel/gcc

    # consider removing old gcc only if it still exists after emerge
    # (emerge was in a new slot, or same version)
    if [ -e "${oldgcc}" ]; then
        chost=`portageq envvar CHOST`
        oldgccprof=`gcc-config -c`
        newgccprof=`find /etc/env.d/gcc -type f -name "${chost}-*"           \
            ! -name "${oldgccprof}" ! -name "${oldgccprof}-*" -printf '%f\n' \
            | sort | head -n 1`

        # unmerge only if the "new" gcc has a different version
        if [ -n "${newgccprof}" ]; then
            gcc-config "${newgccprof}"
            emerge -qC --deselect=n =sys-devel/`basename ${oldgcc}`
        fi
    fi
    env-update
    source /etc/profile

    emerge -q1 sys-libs/glibc
    rm -f ${protected}


    sinfo "Removing unnecessary packages"
    python2=`eselect python list | awk '{ print $2 }' | grep '^python2\.'`
    eselect python set ${python2}

    emerge -qC --deselect=n "=dev-lang/python-3*"


    # Rely on timezone-data ebuild updating /etc/localtime
    sinfo "Compiling system"
    emerge -qepv @system
    emerge -qe   @system
    rm -f ${protected}
    rebuild_locales


    sinfo "Removing non-system packages"
    mv /var/lib/portage/world{,.off}
    echo sys-kernel/hardened-sources > /var/lib/portage/world
    emerge -qc
    mv /var/lib/portage/world{.off,}


    sinfo "Checking for non-rebuilt packages"
    orphans=`find /var/db/pkg -mindepth 3 -maxdepth 3 -name BUILD_TIME           \
        ! -path  /var/db/pkg/sys-kernel/hardened-sources-${hsversion}/BUILD_TIME \
        ! -newer /var/db/pkg/sys-kernel/hardened-sources-${hsversion}/BUILD_TIME \
        -printf '%h\n' | sed s:/var/db/pkg/:: | sort`
    if [ -n "${orphans}" ]; then
        sinfo "The following packages were not rebuilt"
        echo "${orphans}"
        exit 1
    fi


    sinfo "Marking tree as ready for incremental builds"
    touch /usr/src/linux-${kversion}/incremental


    # Shouldn't contain any rebuilds
    sinfo "Listing updates"
    emerge -qupvDN --with-bdeps y @world

else
    sinfo "Skipping full rebuild (use \"fresh\")"
    sinfo "Listing updates"

    updlist=`mktemp`
    emerge -qupvDN --with-bdeps y --color y @world | tee ${updlist}

    if [ -s ${updlist} ]; then
        echo -n "Press Enter to continue..."
        read
    fi

    rm ${updlist}
fi


sinfo "Compiling world"
emerge -quDN --with-bdeps y @world


# Some news are delayed until first emerge
eselect news read all
eselect news purge


sinfo "Removing unnecessary packages"
emerge -qc --deselect=n


sinfo "Updating Perl modules"
perl-cleaner --ph-clean --modules -- -q


# sinfo "Updating Python modules"
# python-updater -dmanual -- -q


sinfo "Checking linking consistency"
revdep-rebuild -qi

rm -f ${protected}
etc-update
rebuild_locales


if [ ! -e /var/cache/eix ]; then
    sinfo "Creating eix database"
    eix-update -q
fi


sinfo "Compiling custom executables"
mkdir -p /usr/lib/xchat/plugins

cflags="-std=c99 -Wall -pedantic `portageq envvar CFLAGS` `portageq envvar LDFLAGS`"
gcc  ${cflags} -o /usr/local/sbin/udev-watchdog      /usr/local/src/udev-watchdog.c -ludev
gcc  ${cflags} -o /usr/local/sbin/slay               /usr/local/src/slay.c
gcc  ${cflags} -o /usr/local/bin/hex2base32          /usr/local/src/hex2base32.c
gcc  ${cflags} -o /usr/local/bin/log-limit           /usr/local/src/log-limit.c
gcc  ${cflags} -o /usr/local/libexec/cable/service   /usr/local/src/cable-service.c
gcc  ${cflags} -o /usr/local/libexec/cable/daemon    /usr/local/src/cable-daemon.c  -lrt
gcc  ${cflags} -o /usr/local/libexec/cable/mhdrop    /usr/local/src/cable-mhdrop.c
gcc  ${cflags} -o /usr/lib/xchat/plugins/cap_sasl.so /usr/local/src/cap_sasl.c -shared -fPIC \
     -D _GNU_SOURCE -I /usr/include/glib-2.0 -I /usr/lib/glib-2.0/include -Wl,--export-dynamic
               
cflags="-Wall `portageq envvar CFLAGS`"
mkdir -p /usr/local/addons/initrd
klcc ${cflags} -o /usr/local/addons/initrd/memwipe    /usr/local/src/memwipe.c
klcc ${cflags} -o /usr/local/addons/initrd/init-kexec /usr/local/src/init-kexec.c

strip -s /usr/local/sbin/udev-watchdog       \
         /usr/local/sbin/slay                \
         /usr/local/bin/hex2base32           \
         /usr/local/bin/log-limit            \
         /usr/local/libexec/cable/service    \
         /usr/local/libexec/cable/daemon     \
         /usr/local/libexec/cable/mhdrop     \
         /usr/local/addons/initrd/memwipe    \
         /usr/local/addons/initrd/init-kexec \
         /usr/lib/xchat/plugins/cap_sasl.so

jflags="-target 1.5 -deprecation -Werror"
jartmp=`mktemp -d`
javac ${jflags} -classpath /opt/i2p/lib/i2p.jar -d ${jartmp} /usr/local/src/EepPriv.java
cat <<EOF > ${jartmp}/manifest.mf
Manifest-Version: 1.0
Created-By: LibertÃ© Linux ${VERSION}
Main-Class: su.dee.i2p.EepPriv
Class-Path: /opt/i2p/lib/i2p.jar
EOF
jar c0mf ${jartmp}/manifest.mf /usr/local/libexec/cable/eeppriv.jar -C ${jartmp} su
rm -r ${jartmp}


sinfo "Generating localization and timezone menus"
# s/AD/Andorra/;...
ccrep=`awk -F '\t' '!/^#/ { printf "s/^%s\\\\>/\"%s\"/;", $1, $2 }' /usr/share/zoneinfo/iso3166.tab`
# s:__aa_DJ :"Afar language locale for Djibouti (Cadu/Laaqo Dialects)" :;...
lcrep=`awk '/^[[:blank:]]*title\y/ { match(FILENAME, /(.*\/)?(.*)/, a); match($0, /^[[:blank:]]*title[[:blank:]]+(.*)/, b); printf "s:__%s :%s :;", a[2], gensub(/\.\"$/, "\"", 1, b[1]); nextfile }' /usr/share/i18n/locales/*`
# "Spain" ca "__ca_ES@valencia" ca_ES.UTF-8@valencia (+ lcrep)
awk '/UTF-8/ && !/^iw_IL/ { match($1, /^([a-z]+)_([A-Z]+)\y(.*@([^.]*))?/, a); printf "%s %s ", a[2], "__" a[1] "_" a[2] (a[4]=="" ? "" : "@" a[4]); print $1 }' /usr/share/i18n/SUPPORTED | sed "${ccrep}${lcrep}" | LC_ALL=C sort | tr '\n' ' ' > /etc/locale.menu
# "Antarctica" Antarctica/McMurdo "McMurdo Station, Ross Island"
awk -F '\t' '!/^#/ { printf "%s %s \"%s\"\n", $1, $3, $4 }' /usr/share/zoneinfo/zone.tab | sed "${ccrep}" | LC_ALL=C sort | tr '\n' ' ' > /etc/timezone.menu


sinfo "Selectively disabling PAX"
paxctl -m /usr/bin/mplayer /usr/bin/audacious2 /usr/bin/jamvm


sinfo "Configuring fontconfig"
for fconf in \
    10-no-sub-pixel.conf \
    20-unhint-small-dejavu-sans.conf \
    20-unhint-small-dejavu-sans-mono.conf \
    20-unhint-small-dejavu-serif.conf \
    44-wqy-zenhei.conf \
    57-dejavu-sans.conf \
    57-dejavu-sans-mono.conf \
    57-dejavu-serif.conf \
    65-khmer.conf \
    65-ttf-thai-tlwg.conf \
    70-no-bitmaps.conf
do
    if [ ! -f /etc/fonts/conf.d/${fconf} ]; then
        eselect fontconfig enable ${fconf}
    fi
done

# Ghostscript has its urw-fonts dependency stripped
if [ -e /usr/share/fonts/default ]; then
    rm    /usr/share/fonts/default/ghostscript
    rmdir /usr/share/fonts/default
fi


sinfo "Configuring Mesa"
for mfam in `eselect mesa list | sed -n 's/^\([^[:blank:]]\+\).*/\1/p'`; do
    eselect mesa set ${mfam} classic
done


# The piciids/usbids sites are notorious for various failures
sinfo "Updating PCI, USB, SMART and I2P hosts databases"

sed -i '/^PCI_COMPRESSED_IDS=1$/d; s/^\(DEST=.*\)\.gz$/\1/' /usr/sbin/update-pciids
update-pciids -q     || echo "update-pciids failed (ignoring)"

rm -f /usr/share/misc/usb.ids.gz
update-usbids -q     || echo "update-usbids failed (ignoring)"

update-smart-drivedb || echo "update-smart-drivedb failed (ignoring)"

if [ ! -e /usr/share/misc/pci.ids  -o  ! -e /usr/share/misc/usb.ids ]; then
    sinfo "Do PCI/USB IDs lists use compressed format exclusively?"
    exit 1
fi

wget -nv -O /opt/i2p/hosts.txt ${i2phosts}


sinfo "Verifying PCI, USB, SMART and I2P hosts databases"
LC_ALL=C awk --posix "! /${pciids_regexp}/                  { print; exit 1 }" /usr/share/misc/pci.ids
LC_ALL=C awk --posix "! /${pciids_regexp}|${usbids_regexp}/ { print; exit 1 }" /usr/share/misc/usb.ids

cpp -x c -fpreprocessed -std=c99 -nostdinc -undef -Wall -Werror -pedantic-errors \
    -o /tmp/drivedb.h /usr/share/smartmontools/drivedb.h
drivedbout=$(sed '/^ *$/d; /^#/d; s/ //g; s/\\"//g; s/"[^"]*"//g' /tmp/drivedb.h | tr -d '\n' | sed 's/{,,,,},//g' | wc -c)
if [ "${drivedbout}" != 0 ]; then
    sinfo "/usr/share/smartmontools/drivedb.h verification failed"
    exit 1
fi
rm /tmp/drivedb.h

LC_ALL=C awk --posix "! /${i2phosts_regexp}/ { print; exit 1 }" /opt/i2p/hosts.txt


# /usr/local/share/ca-certificates is implicitly trusted
sinfo "Refreshing trusted CA certificates list"
update-ca-certificates --fresh


sinfo "Generating /etc/issue"
sed "s@VERSION@${VERSION}@" ${HOME}/config/issue > /etc/issue


sinfo "Patching init scripts"
initpatches="inittab kexec iptables smartd"
for p in ${initpatches}; do
    spatch ${HOME}/patches/${p}.patch -p0
done
sed -i 's/^# include /include /' /etc/nanorc


sinfo "Configuring start-up services"
svcsysinit="udev"
svcboot="consolefont microcode_ctl irqbalance haveged kexec
         metalog iptables consolekit alsasound fbcondecor
         lockdown"
svcdefault="liberte identity cabled persist xconfig
            acpid laptop_mode gpm smartd bluetooth
            nscd autofs NetworkManager privoxy
            nginx spawn-fcgi.cable udev-postmount"
delsvcboot="urandom swap bootmisc"
delsvcdefault="netmount local"
delsvcshutdown="savecache"

for runlevel in sysinit boot default; do
    eval svcs=\${svc${runlevel}}
    for svc in ${svcs}; do
        [   -e /etc/runlevels/${runlevel}/${svc} ] || rc-update add ${svc} ${runlevel}
    done
done

for runlevel in boot default shutdown nonetwork; do
    eval svcs=\${delsvc${runlevel}}
    for svc in ${svcs}; do
        [ ! -e /etc/runlevels/${runlevel}/${svc} ] || rc-update del ${svc} ${runlevel}
    done
done

rc-update -u


# (lastlog is not sparse on unionfs, wtmp has no growth limit)
sinfo "Disabling non-rotating logs"
ln -sf /dev/null /var/log/ConsoleKit/history
ln -sf /dev/null /var/log/lastlog
rm -f  /var/log/wtmp

truncate -s 0   /var/run/utmp
chown root:utmp /var/run/utmp
chmod 664       /var/run/utmp


# Root password good for maintenance before /etc/init.d/local.start is in charge
# "grpck -r" fails during early emerge shadow because of user "games" in /etc/group
# "wheel"   group: necessary for su/sudo PAM authentication + GRSEC TPE (= 10)
# "users"   group: some apps require for DBUS communication
# "plugdev" group: changing NetworkManager settings via DBUS
# "audio"   group: ALSA/OSS devices access
# "video"   group: V4L2 devices access (webcam - mplayer tv://)
# "cdrom"   group: raw CD devices access (cd playing + cd/dvd writing)
# "lp"      group: printing subsystem access (CUPS; DBUS comm. with bluetoothd)
# "games"   group: prevent games complaining about not keeping scores
sinfo "Setting up users"
sed -i 's/^#\?\(ENCRYPT_METHOD\) .*/\1 SHA256/' /etc/login.defs

pwconv
pwck -qr

groupdel smmsp || [ $? = 6 ]
grpck -r
grpconv

echo root:liberte | chpasswd

groupadd -f -r games
groupadd -f -r plugdev
groupadd -g 9000 legion || [ $? = 9 ]
groupadd -g 9001 nofw   || [ $? = 9 ]
groupadd -g 9002 cable  || [ $? = 9 ]

useradd -u 2101 -g legion -c "Anonymous"            -d /home/anon                  anon  || [ $? = 9 ]
useradd -u 2102 -g nofw   -c "Non-firewalled"       -d /home/nofw -s /sbin/nologin nofw  || [ $? = 9 ]
useradd -u 2103 -g cable  -c "Cables Communication" -d /dev/null  -s /sbin/nologin -G legion cable || [ $? = 9 ]

usermod -G wheel,users,plugdev,audio,video,cdrom,lp,games anon

useradd -c nscd    -d /dev/null -s /sbin/nologin -r nscd || [ $? = 9 ]
useradd -c htpdate -d /dev/null -s /sbin/nologin -r htp  || [ $? = 9 ]
useradd -c slay    -d /dev/null -s /sbin/nologin -r slay || [ $? = 9 ]

for uid in i2p nginx; do
    touch               /tmp/${uid}-ref
    chown ${uid}:${uid} /tmp/${uid}-ref
done


sinfo "Initializing a secondary PGP keyring"
sudo -n -u anon touch     /home/anon/persist/security/pgp/liberte.gpg
sudo -n -u anon chmod 600 /home/anon/persist/security/pgp/liberte.gpg
sudo -n -u anon gpg -q --homedir /home/anon/persist/security/pgp \
    --primary-keyring liberte.gpg --import /usr/local/addons/keys/liberte-*.asc
sudo -n -u anon cp -p /usr/local/addons/keys/mfpl.crt /home/anon/persist/security/pgp
sudo -n -u anon chmod 600 /home/anon/persist/security/pgp/mfpl.crt

# clear pam_mktemp's append-only attribute to allow later livecd directory removal
chattr -f -a /tmp/.private || true


sinfo "Installing wrappers"
mv -n /sbin/iwconfig{,.orig}
ln -sf iwconfig.wrapper /sbin/iwconfig


sinfo "Compiling kernel"
makeopts=`portageq envvar MAKEOPTS`
export KBUILD_BUILD_VERSION=0
export KBUILD_BUILD_TIMESTAMP=`date -u +%F`
rm -f /usr/src/linux/include/generated/compile.h

make -s ${makeopts} -C /usr/src/linux 2>/dev/null
make -s ${makeopts} -C /usr/src/linux modules_install
rm /lib/modules/*/{build,source}
cp -a /usr/src/linux/arch/x86/boot/bzImage /boot/kernel-x86.zi


sinfo "Compiling kexec kernel"
rm -f /usr/src/linux-kexec/include/generated/compile.h
make -s ${makeopts} -C /usr/src/linux-kexec 2>/dev/null
cp -a /usr/src/linux-kexec/arch/x86/boot/bzImage /usr/local/boot/kernel-kexec.zi


sinfo "Creating initramfs image"
extmods=`sed -n '/^[^#]/p' ${HOME}/initrd/modules.extra`
globmods=
for globmod in `sed -n '/^[^#]/p' ${HOME}/initrd/modules.global`; do
    globmods="${globmods} "`find /lib/modules/${kversion}/kernel/drivers/${globmod} \
        -name '*.ko' -printf '%f\n' | sed 's/\.ko$//'`
done

cpiodir=`mktemp -d`
for mod in ${extmods} ${globmods}; do
    # extract canonical name (e.g., _ vs. -, aliases, ...)
    mod=$(basename $(modinfo -F filename -k ${kversion} ${mod}))

    # unlike "modinfo -F depends", modules.dep lists nested dependencies
    grep /${mod}: /lib/modules/${kversion}/modules.dep \
        | tr -d : | tr ' ' '\n' >> ${cpiodir}/modules.extra
done

for mod in `sort -u ${cpiodir}/modules.extra`; do
    mod=/lib/modules/${kversion}/${mod}
    mkdir -p     ${cpiodir}`dirname ${mod}`
    cp -p ${mod} ${cpiodir}`dirname ${mod}`
done
depmod -b ${cpiodir} -e -F /usr/src/linux/System.map ${kversion}

cp ${HOME}/initrd/initramfs ${cpiodir}
find ${cpiodir} -mindepth 3 -type d \
    -printf 'dir  %P    0755 0 0\n' >> ${cpiodir}/initramfs
find ${cpiodir} -mindepth 3 -type f \
    -printf 'file %P %p 0644 0 0\n' >> ${cpiodir}/initramfs

/usr/src/linux/usr/gen_init_cpio ${cpiodir}/initramfs \
    | xz -c -C crc32 > /boot/initrd-x86.xz

rm -r ${cpiodir}


sinfo "Creating kexec initramfs image"
/usr/src/linux-kexec/usr/gen_init_cpio ${HOME}/initrd/initramfs-kexec \
    | xz -c -C crc32 > /usr/local/boot/initrd-kexec.xz


sinfo "Verifying XZ decompression memory requirements"
kernxz=arch/x86/boot/compressed/vmlinux.bin.xz

head -c -4 /usr/src/linux/${kernxz}       | xz -t -M $((2 * ${xzmem}))MiB
xz -t -M ${xzmem}MiB /boot/initrd-x86.xz

head -c -4 /usr/src/linux-kexec/${kernxz} | xz -t -M $((2 * ${xzmem}))MiB
xz -t -M ${xzmem}MiB /usr/local/boot/initrd-kexec.xz


sinfo "Kernel config differences:"
diff ${HOME}/config/linux-${kversion%-*}.config       /usr/src/linux/.config       || true


sinfo "Kexec kernel config differences:"
diff ${HOME}/config/linux-${kversion%-*}-kexec.config /usr/src/linux-kexec/.config || true


if [ -e /etc/portage/savedconfig/sys-apps/busybox-* ]; then
    sinfo "BusyBox config differences:"
    diff /etc/portage/savedconfig/sys-apps/busybox{,-*} || true
fi


sinfo "Generating SYSLINUX configuration"
rm    -f /boot/boot
mkdir -p /boot/syslinux
syslinux -v 2>&1 | cut -d' ' -f2 > /boot/syslinux/version
cp -p /usr/share/syslinux/{syslinux.exe,{menu,chain,hdt,reboot}.c32,isolinux.bin} /boot/syslinux/
tar cpjf /boot/syslinux/syslinux-x86.tbz \
    -C /sbin extlinux -C /usr/share/syslinux altmbr_c.bin \
    -C /usr/bin syslinux mtools mcopy mmove mattrib
cp -p /usr/share/consolefonts/${consolefont}.gz /boot/syslinux/
rm -f /boot/syslinux/${consolefont}
gunzip /boot/syslinux/${consolefont}.gz

cat ${HOME}/config/syslinux.cfg \
    | sed "/^##/d ;
           s@PREFIX@/liberte@ ;
           s@VERSION@${VERSION}@ ;
           s@CONSOLEFONT@${consolefont}@" \
    | iconv -f UTF-8 -t CP437 \
    > /boot/syslinux/syslinux.cfg


sinfo "Done."
