#!/bin/sh -e

export LC_ALL=C


sinfo() {
    echo ${BASH:+-e} "\033[1;33;41m$@\033[0m"
}


# Variables
helpdir=${HOME}/helpers

live=/mnt/live
rootfspfx=${HOME}/config/rootfs

cdroot=/mnt/boot/cdroot
imagepfx=/mnt/boot/liberte-${LVERSION}

efilabel=LIBERTE_EFI
efiboot=${cdroot}/boot/efiboot.img
efisbpfx=/usr/local/addons/secureboot/Liberte-SecureBoot

ziimage=${cdroot}/liberte/boot/kernel-x86.zi
sqimage=${cdroot}/liberte/boot/root-x86.sfs
sqsort=${live}/tmp/transient/pkg/squashfs.sort

sysver=`syslinux -v 2>&1 | cut -d' ' -f2`


mibsize() {
    local bytes=`stat -c %s "$1"`
    echo $(((bytes + 512 * 1024) / (1024 * 1024)))
}


if [ "$1" = copy ]; then
    # Relies on 755 mode of .../{copy,/dist}
    # (copied over to .../copy/mnt/{live,boot})
    sinfo "Creating temporary copy"
    rsync -aHAXS -x -i --delete-excluded        \
        --include-from=${rootfspfx}.includes    \
        --exclude-from=${rootfspfx}-cp.excludes \
        / ${live} | head
    sinfo "Done."
    exit
fi


sinfo "Pruning the temporary copy"
rsync -aHAXS -x -i --delete-excluded        \
    --include-from=${rootfspfx}.includes    \
    --exclude-from=${rootfspfx}.excludes    \
    --exclude-from=${rootfspfx}-cp.excludes \
    ${live}/ ${live} | head


# Check the live tree
${helpdir}/chk-live-tree


sinfo "Preparing packages list and SquashFS ordering"
${helpdir}/gen-package-list


if [ -e ${cdroot}/liberte/boot/packages.lst ]; then
    sinfo "Listing package changes"
    diff -U 0 ${cdroot}/liberte/boot/packages.lst ${live}/boot/packages.lst \
        | tail -n +3 | sed '/^@@/d'
fi


sinfo "Copying image add-ons"
rm -rf ${cdroot}
mkdir  ${cdroot}

rsync -aHS --delete-excluded ${HOME}/dist/  ${cdroot}/liberte
sed -i "s/SYSVER/${sysver}/" ${cdroot}/liberte/setup.sh


sinfo "Copying image /boot"
rsync -aHS --delete-excluded ${live}/boot ${cdroot}/liberte
mv ${cdroot}/liberte/boot/EFI ${cdroot}


sinfo "Converting text files to DOS line endings"
find ${cdroot} \( -name '*.txt' -o -name '*.bat' -o -name '*.cfg' \) \
    -exec sed -i 's/$/\r/' {} \;


# Using default block size of 128KiB
# (chmod due to GRKERNSEC_HIDESYM)
sinfo "Creating SquashFS image"

# NOTE: POSIX ACLs are not supported by SquashFS
#       Non-PaX user xattrs are not supported by tmpfs
mksquashfs ${live} ${sqimage}                \
    -noappend -no-progress -no-exports       \
    -always-use-fragments -comp xz -Xbcj x86 \
    -sort ${sqsort} -ef ${rootfspfx}.ignore
chmod go= ${sqimage}


sinfo "Adapting Syslinux and GRUB configuration"

fshash=`sha256sum ${sqimage}`
sed -i "s/FSHASH/${fshash%% *}/"                  \
    ${cdroot}/liberte/boot/syslinux/syslinux.cfg  \
    ${cdroot}/liberte/boot/grub/grub.cfg          \
    ${cdroot}/liberte/qemulate.sh

sha256sum ${cdroot}/liberte/boot/grub/* ${ziimage}  \
    | sed "/\<grub\.\(cfg\|mf\)\>/d; s:${cdroot}::" \
    > ${cdroot}/liberte/boot/grub/grub.mf

grub1hash=`sha256sum ${cdroot}/liberte/boot/grub/grub.cfg`
grub2hash=`sha256sum ${cdroot}/liberte/boot/grub/grub.mf`
sed -i "s/replace_hash_\{50\}01/${grub1hash%% *}/ ; \
        s/replace_hash_\{50\}02/${grub2hash%% *}/"  \
    ${cdroot}/EFI/BOOT/*.EFI


sinfo "Signing EFI GRUB images"

cp -p ${efisbpfx}-CA.der ${cdroot}/EFI/
for efiimg in ${cdroot}/EFI/BOOT/*.EFI; do
    sbsign   --cert ${efisbpfx}-Cert-1.crt --key ${efisbpfx}-Cert-1.key \
             --output ${efiimg}.signed ${efiimg}
    sbverify --cert ${efisbpfx}-CA.crt ${efiimg}.signed
    mv ${efiimg}.signed ${efiimg}
done


# UEFI Spec 2.3.1 Err. A, Sec. 12.3.3: "UEFI implementations may allow
# the use of conforming FAT partitions which do not use the ESP GUID."
sinfo "Building binary distribution ${imagepfx##*/}.zip"
rm -f ${imagepfx}.zip
(cd ${cdroot}; zip -r9 -q ${imagepfx}.zip EFI liberte)
unzip -qt ${imagepfx}.zip


# Add two extra 4K blocks (may need adjustment)
sinfo "Creating EFI boot image for El-Torito"

mkdir ${cdroot}/boot
efiblocks=`du -s -B 4K --apparent-size ${cdroot}/EFI | cut -f1`
truncate -s $(((efiblocks + 2) * 4))K ${efiboot}

mkdosfs -n "${efilabel}" -I -f 1 -r 16 -R 1 ${efiboot}
MTOOLS_SKIP_CHECK=1 mcopy -i ${efiboot} -smQ ${cdroot}/EFI ::


# Hide root directories on Windows, and reset volume information
# Allow '-' in filenames, since ISOLINUX doesn't support RockRidge/Joliet
# (translation equivalent to mount's map=normal is still performed)
sinfo "Creating ISO image ${imagepfx##*/}.iso"

mkdir ${cdroot}/boot/syslinux
cp -p ${cdroot}/liberte/boot/syslinux/syslinux.cfg \
      ${cdroot}/boot/syslinux/syslinux.cfg

set -- -quiet -iso-level 2 -relaxed-filenames -R -no-pad \
       -sysid '' -V '' -A ''                             \
       -no-emul-boot -boot-load-size 4 -boot-info-table  \
       -c boot/eltorito.cat                              \
       -b liberte/boot/syslinux/isolinux.bin             \
       -eltorito-alt-boot -no-emul-boot                  \
       -eltorito-platform efi -b boot/efiboot.img        \
       -hidden boot -hidden liberte -m EFI
mkisofs "$@" -o ${imagepfx}.iso ${cdroot}
isovfy ${imagepfx}.iso


sinfo "Creating ISO image ${imagepfx##*/}-bootstrap.iso"
mkisofs "$@" -m ${sqimage##*/} -o ${imagepfx}-bootstrap.iso ${cdroot}
isovfy ${imagepfx}-bootstrap.iso


echo "Disk usage: `du -s --apparent-size -B 1M ${cdroot} | cut -f1` MiB"
echo "ZIP size:   `mibsize ${imagepfx}.zip` MiB"
echo "ISO size:   `mibsize ${imagepfx}.iso` MiB"


sinfo "Done."
