#!/bin/sh -e

sinfo() {
    echo ${BASH:+-e} "\033[1;33;41m$@\033[0m"
}


# Variables
helpdir=${HOME}/helpers

live=/mnt/live
rootfspfx=${HOME}/config/rootfs

cdroot=/mnt/boot/cdroot
imagepfx=/mnt/boot/liberte-${LVERSION}


mibsize() {
    local bytes=`stat -c %s "$1"`
    echo $(((bytes + 512 * 1024) / (1024 * 1024)))
}


if [ "$1" = copy ]; then
    # Relies on 755 mode of .../{copy,/dist}
    # (copied over to .../copy/mnt/{live,boot})
    sinfo "Creating temporary copy"
    rsync -aHAXS -x -i --delete-excluded        \
        --include-from=${rootfspfx}.includes    \
        --exclude-from=${rootfspfx}-cp.excludes \
        / ${live} | head
    sinfo "Done."
    exit
fi


sinfo "Pruning the temporary copy"
rsync -aHAXS -x -i --delete-excluded        \
    --include-from=${rootfspfx}.includes    \
    --exclude-from=${rootfspfx}.excludes    \
    --exclude-from=${rootfspfx}-cp.excludes \
    ${live}/ ${live} | head


# Check the live tree
${helpdir}/chk-live-tree


sinfo "Preparing packages list and SquashFS ordering"
${helpdir}/gen-package-list


if [ -e ${cdroot}/liberte/boot/packages.lst ]; then
    sinfo "Listing package changes"
    diff -U 0 ${cdroot}/liberte/boot/packages.lst ${live}/boot/packages.lst \
        | tail -n +3 | sed '/^@@/d'
fi


# Using default block size of 128KiB
# (chmod due to GRKERNSEC_HIDESYM)
sinfo "Creating SquashFS image"

rm -rf ${cdroot}
mkdir  ${cdroot} ${cdroot}/liberte ${cdroot}/liberte/boot

${helpdir}/mk-squashfs


sinfo "Initializing boot environment"
${helpdir}/mk-boot


# UEFI Spec 2.3.1 Err. A, Sec. 12.3.3: "UEFI implementations may allow
# the use of conforming FAT partitions which do not use the ESP GUID."
sinfo "Building binary distribution ${imagepfx##*/}.zip"
rm -f ${imagepfx}.zip
(cd ${cdroot}; zip -r9 -q ${imagepfx}.zip EFI liberte)
unzip -qt ${imagepfx}.zip


sinfo "Creating ISO image ${imagepfx##*/}.iso"
${helpdir}/mk-iso


sinfo "Creating OVA bundle ${imagepfx##*/}.zip"
${helpdir}/mk-ova


echo "Disk usage: `du -s --apparent-size -B 1M ${cdroot} | cut -f1` MiB"
echo "ZIP size:   `mibsize ${imagepfx}.zip` MiB"
echo "ISO size:   `mibsize ${imagepfx}.iso` MiB"
echo "OVA size:   `mibsize ${imagepfx}.ova` MiB"


sinfo "Done."
