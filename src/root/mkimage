#!/bin/sh -e

export LC_ALL=C


sinfo() {
    echo ${BASH:+-e} "\033[1;33;41m$@\033[0m"
}


# Variables
helpdir=${HOME}/helpers
nosuid=${HOME}/config/rootfs.nosuid

live=/mnt/live
cdroot=/mnt/boot/cdroot
distroot=/mnt/boot

distname=liberte-${LVERSION}
zipfile=${distroot}/${distname}.zip
isofile=${distroot}/${distname}.iso

efilabel=LIBERTE_EFI
efiboot=${cdroot}/isolinux/efiboot.img

sqimage=${cdroot}/liberte/boot/root-x86.sfs
sqsort=${live}/tmp/transient/pkg/squashfs.sort
sqpseudo=${HOME}/config/rootfs.pseudo
sqignore=${HOME}/config/rootfs.ignore

luser=`id -u anon`
lgroup=`id -g anon`

sysver=`syslinux -v 2>&1 | cut -d' ' -f2`


# See also /usr/local/sbin/ps-mount
vfatflags=noatime,noexec,flush,iocharset=iso8859-1,utf8,uid=${luser},gid=${lgroup},umask=0177,dmask=077
isofsflags=nosuid,nodev,iocharset=iso8859-1,utf8
extflags=noatime,nosuid,nodev,acl,user_xattr
hfspflags=noatime,nosuid,nodev,uid=${luser},gid=${lgroup},umask=077


mibsize() {
    local bytes=`stat -c %s "$1"`
    echo $(((bytes + 512 * 1024) / (1024 * 1024)))
}


sinfo "Removing unnecessary SUID bits"
chmod a-s `sed -n "s:^/:${live}&:p" ${nosuid}`


# Check the live tree
${helpdir}/chk-live-tree


sinfo "Preparing packages list and SquashFS ordering"
${helpdir}/gen-package-list


if [ -e ${cdroot}/liberte/boot/packages.lst ]; then
    sinfo "Listing package changes"
    diff -U 0 ${cdroot}/liberte/boot/packages.lst ${live}/boot/packages.lst \
        | tail -n +3 | sed '/^@@/d'
fi


sinfo "Copying image add-ons"
rm -rf ${cdroot}
mkdir  ${cdroot}

rsync -aHS --delete-excluded ${HOME}/dist/  ${cdroot}/liberte
sed -i "s/SYSVER/${sysver}/" ${cdroot}/liberte/setup.sh


sinfo "Copying image /boot"
rsync -aHS --delete-excluded ${live}/boot ${cdroot}/liberte
mv ${cdroot}/liberte/boot/EFI ${cdroot}


# Using default block size of 128KiB
# (chmod due to GRKERNSEC_HIDESYM)
sinfo "Creating SquashFS image"

mksquashfs ${live} ${sqimage} -noappend -no-progress -no-exports \
    -always-use-fragments -no-xattrs -comp xz -Xbcj x86          \
    -pf ${sqpseudo} -sort ${sqsort} -ef ${sqignore}
chmod go= ${sqimage}

sfshash=`sha256sum ${sqimage}`
sfshash="${sfshash%% *}"


sinfo "Adapting Syslinux and GRUB configuration"

sed -i "s/TAG //; s/ROOTFS/vfat/; s/FSFLAGS/${vfatflags}/; s/FSHASH/${sfshash}/" \
    ${cdroot}/liberte/boot/syslinux/syslinux.cfg
sed -i "s/FSHASH/${sfshash}/; s/VFATFLAGS/${vfatflags}/; s/EXTFLAGS/${extflags}/;
        s/ISOFSFLAGS/${isofsflags}/; s/HFSPFLAGS/${hfspflags}/" \
    ${cdroot}/liberte/boot/grub/grub.cfg

# EXTLINUX config takes precedence over SYSLINUX one when in same directory
mkdir ${cdroot}/liberte/boot/syslinux/ext
cp -p ${live}/boot/syslinux/syslinux.cfg ${cdroot}/liberte/boot/syslinux/ext/extlinux.conf
sed -i "s/TAG //; s/ROOTFS/ext4/; s/FSFLAGS/${extflags}/;  s/FSHASH/${sfshash}/" \
    ${cdroot}/liberte/boot/syslinux/ext/extlinux.conf

# ISOLINUX doesn't support RockRidge/Joliet, so must replace '-' in filenames
# (translation equivalent to mount's map=normal is still performed)
cp -p ${live}/boot/syslinux/syslinux.cfg ${cdroot}/liberte/boot/syslinux/isolinux.cfg
sed -i "s/TAG/[CD]/; s/ROOTFS/iso9660 readonly toram/; s/FSFLAGS/${isofsflags}/;
        s/FSHASH/${sfshash}/; s/\(\(FONT\|LINUX\|INITRD\) [^-]*\)-/\1_/" \
    ${cdroot}/liberte/boot/syslinux/isolinux.cfg

mkdir ${cdroot}/isolinux
cp -p ${cdroot}/liberte/boot/syslinux/isolinux.cfg ${cdroot}/isolinux/isolinux.cfg

sed -i "s/FSHASH/${sfshash}/" ${cdroot}/liberte/qemulate.sh


sinfo "Converting text files to DOS line endings"
find ${cdroot} \( -name '*.txt' -o -name '*.bat' -o -name '*.cfg' \) \
    -exec sed -i 's/$/\r/' {} \;


# UEFI Spec 2.3.1 Err. A, Sec. 12.3.3: "UEFI implementations may allow
# the use of conforming FAT partitions which do not use the ESP GUID."
sinfo "Building binary distribution ${distname}.zip"
rm -f ${zipfile}
(cd ${cdroot}; zip -r9 -q ${zipfile} EFI liberte)


# Add two extra 4K blocks (may need adjustment)
sinfo "Creating EFI boot image for El-Torito"
efiblocks=`du -s -B 4K --apparent-size ${cdroot}/EFI | cut -f1`
truncate -s $(((efiblocks + 2) * 4))K ${efiboot}
mkdosfs -n "${efilabel}" -I -f 1 -r 16 -R 1 ${efiboot}
MTOOLS_SKIP_CHECK=1 mcopy -i ${efiboot} -smQ ${cdroot}/EFI ::


# Hide root directories on Windows, and reset volume information
sinfo "Creating ISO image ${distname}.iso"
mkisofs -quiet -iso-level 2 -no-pad -sysid '' -V '' -A '' -R \
    -no-emul-boot -boot-load-size 4 -boot-info-table         \
    -c boot.cat -b liberte/boot/syslinux/isolinux.bin        \
    -eltorito-alt-boot -no-emul-boot                         \
    -eltorito-platform efi -b isolinux/efiboot.img           \
    -hide boot.cat -hidden isolinux -hidden liberte -m EFI   \
    -o ${isofile} ${cdroot}
isovfy ${isofile}


echo "Disk usage: `du -s --apparent-size -B 1M ${cdroot} | cut -f1` MiB"
echo "ZIP size:   `mibsize ${zipfile}` MiB"
echo "ISO size:   `mibsize ${isofile}` MiB"


sinfo "Done."
