#!/bin/sh -e

sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}


# Sanity check
if [ ${PHASE} != copy ]; then
    echo "This is phase [${PHASE}], run $0 in phase [copy]."
    exit 1
fi


sinfo "Cleaning up portage configuration"
sed -i /TEMP/d /var/lib/portage/world /etc/portage/package.use


# equery requires gentoolkit, copy ebuilds early
# NOTE: the below patches are intended for depclean
# portage:     exclude python  RDEPEND
# gentoolkit:  exclude perl    RDEPEND
# lm_sensors:  exclude perl    RDEPEND
# libglade:    exclude python  RDEPEND
# gvfs:        exclude openssh RDEPEND
# splashutils: exclude cpio    RDEPEND
sinfo "Patching copies of selected ebuilds"
ebuilds="sys-apps/portage
         app-portage/gentoolkit
         sys-apps/lm_sensors
         gnome-base/libglade
         gnome-base/gvfs
         media-gfx/splashutils"

# /usr/portage is bind-mounted ro
for ebuild in ${ebuilds}; do
    rsync -a /usr/portage/${ebuild} /var/tmp/ebuilds/`dirname ${ebuild}`
    eval ebuild_`basename ${ebuild}`=`equery which ${ebuild}`
done

# Make portage think it doesn't need Python
# (allows depclean after python unmerge + shadow copy)
sed -i 's/\${python_dep}//' ${ebuild_portage}

# Perl is not needed at all
sed -i s:dev-lang/perl:: ${ebuild_gentoolkit}

# Perl is only needed by sensors-detect and sensors-conf-convert
sed -i s:dev-lang/perl:: ${ebuild_lm_sensors}

# Python is only needed by libglade-convert
sed -i 's@>=dev-lang/python[[:alnum:].-]*@@' ${ebuild_libglade}

# OpenSSH is only needed for ssh:// support
sed -i s:net-misc/openssh:: ${ebuild_gvfs}

# cpio is only needed for splash_geninitramfs
sed -i s:app-arch/cpio:: ${ebuild_splashutils}

for ebuild in ${!ebuild_*}; do
    eval ebuild \$${ebuild} manifest
done


# Unmerge non-runtime dependencies (and cleanup the kernel directory)
sinfo "Unmerging build and temporary dependencies"
emerge -qc --with-bdeps n


# This recompiles packages with TEMP flags in package.use
sinfo "Recompiling build-dependent packages"
emerge -quDN world


sinfo "Copying gcc shared libs"
rsync -aHS `find /usr/lib/gcc -name '*.so' -o -name '*.so.*'` /usr/lib/
ldconfig


# Unmerge some packages that are listed in the system profile
# No package can be emerged afterwards
sinfo "Unmerging development packages"
mv /usr/lib/libltdl.* /tmp/

emerge -qC \
    sys-devel/make      \
    sys-devel/autoconf  \
    sys-devel/automake  \
    sys-devel/gnuconfig \
    sys-devel/m4        \
    sys-devel/patch     \
    \
    sys-devel/gcc       \
    sys-devel/binutils  \
    sys-devel/libtool   \
    sys-devel/flex      \
    sys-devel/bison     \
    \
    sys-kernel/linux-headers \
    sys-apps/busybox         \
    \
    sys-apps/man        \
    sys-apps/man-pages  \
    sys-apps/texinfo    \
    \
    net-misc/openssh    \
    app-arch/cpio

mv /tmp/libltdl.* /usr/lib/
rm -rf /usr/share/{binutils-data,gcc-data}/
rm -f /usr/lib/{?,}crt?.o


sinfo "Unmerging orphaned packages"
emerge -qc --with-bdeps n


# Any problem will cause a fatal error
sinfo "Checking linking consistency"
revdep-rebuild -q -i


# Unmerge portage utilities (revdep-rebuild is unavailable afterwards)
sinfo "Unmerging portage tools"
emerge -qC app-portage/gentoolkit


# TODO: remove /var/db/pkg/dev-lang/python-*
#       remove python-updater from final unmerges
#       manually remove python files at the end:
#         rm -f `awk '! /^dir / { print $2 }' /tmp/python-*/CONTENTS`
#         rm -r /usr/lib/python*/
#         rm -f /usr/bin/python-{config,wrapper}
#         add env.d/python and python.eselect below
#       remove the pyc/pyo section below
# (once wicd etc. are removed)


sinfo "Unmerging orphaned packages"
emerge -qc --with-bdeps n


# Unmerge packages that other package depend upon, but are not needed
# ("emerge -c" cannot be used afterwards)
# Dependencies:
# python-updater - python
# sandbox        - xz-utils, pax-utils
# portage        - python, sandbox, pax-utils, rsync
sinfo "Unmerging unnecessary packages"
emerge -qC app-admin/python-updater
emerge -qC sys-apps/sandbox


sinfo "Updating environment"
env-update


sinfo "Unmerging portage"
sed -i '\:^... /usr/lib/portage/:d' /var/db/pkg/sys-apps/`echo ${ebuild_portage} | sed 's:.*/::; s:\.ebuild$::'`/CONTENTS
FEATURES="${FEATURES} -sandbox -usersandbox" ebuild ${ebuild_portage} unmerge 1>/dev/null
rm -r /usr/lib/portage/


sinfo "Initializing a secondary PGP keyring"
sudo -n -u anon touch     /home/anon/config/gnupg/liberte.gpg
sudo -n -u anon chmod 600 /home/anon/config/gnupg/liberte.gpg
sudo -n -u anon gpg -q --homedir /home/anon/config/gnupg \
    --primary-keyring liberte.gpg --import /var/tmp/addons/keys/liberte-*.asc


sinfo "Trimming icons cache"
find /usr/share/icons -mindepth 1 -maxdepth 1 -type d \
    -exec gtk-update-icon-cache -q -f -i {} \;
gtk-update-icon-cache -q -f -i -t /usr/share/gconf-editor/icons/hicolor


sinfo "Uncompressing selected files"
gunzip `find /usr/share/consolefonts -name '*.gz'` \
       `find /usr/share/keymaps      -name '*.gz'`


# Use non-optimized bytecode instead of optimized
sinfo "Removing unneeded Python files"
for pyo in `find / -xdev -type f -name '*.pyo'`; do
    py=`echo ${pyo} | sed 's/\.pyo$/.py/'`
    pyc=`echo ${pyo} | sed 's/\.pyo$/.pyc/'`

    if [ ! ${pyo} -ef ${pyc} ]; then
        ln -f ${pyc} ${pyo}
    fi

    if [ -f ${py} ]; then
        if [ ! ${py} -nt ${pyo} ]; then
            # A bit risky (breaks "python script.py" for non-executable script.py)
            if [ ! -x ${py} ]; then
                rm ${py}
            fi
        else
            rm ${pyo} ${pyc}
        fi
    fi
done


sinfo "Patching scripts to use dynamic executables"
sed -i 's:\(s\?bin/.*\)\.static:usr/\1:' /sbin/splash-functions.sh
sed -i 's:\.static::' /usr/bin/splash_manager


sinfo "Removing invalid symlinks, dirs and files"
find / -xdev -type l ! -xtype f ! -xtype d -exec rm {} \;
rmdir /usr/i686-pc-linux-gnu/{bin,lib,}

rm /etc/env.d/05binutils
rm /etc/env.d/05gcc-i686-pc-linux-gnu
rm -rf /etc/env.d/{binutils,gcc}

rm /usr/bin/{{i686-pc-linux-gnu-,}{gcc,g++,c++,cpp},cc,gcov}

rm /usr/bin/{kernel,profile}-config
rm /usr/share/eselect/modules/{binutils,kernel,news,profile}.eselect


sinfo "Updating ld cache"
eselect env update 2>/dev/null
sed -i '/^export \(CONFIG_PROTECT\(_MASK\)\?\|MANPATH\|INFOPATH\|CVS_RSH\)=/d' /etc/profile.env


sinfo "Updating init scripts dependencies cache"
depscan.sh


sinfo "Saving current packages list in /tmp/packages-list"
find /var/db/pkg/ -mindepth 2 -maxdepth 2 -type d | sed 's:^/var/db/pkg/::'| sort > /tmp/packages-list


sinfo "Done."
