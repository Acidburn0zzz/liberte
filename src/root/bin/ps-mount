#!/bin/bash -e

# Apparently, very weird things can happen if some output goes
# to console ("grep: command not found" in splash-functions.sh...)
exec 1>/dev/null 2>&1

# Use of auto.media is exclusive via file lock
lock=/etc/.auto.lock
lockfd=20

# Real work is done in forked process
if [ "$1" = fork ]; then
    shift

    # Files and scripts
    prefix=/mnt/media
    mounts=/etc/auto.media
    daemon=/etc/init.d/autofs
    started=/var/lib/init.d/started/autofs

    # Mount options
    supported=" ext2 vfat msdos ntfs iso9660 "
    luser=anon
    lgroup=legion
    opts_common=noatime,nosuid,nodev,noexec
    opts_vfat=${opts_common},flush,iocharset=iso8859-1,utf8,showexec,uid=${luser},gid=${lgroup},umask=0137,dmask=067
    opts_ntfs=${opts_common},uid=${luser},gid=${lgroup},fmask=0137,dmask=067
    opts_ntfs_ro=${opts_common},ro,uid=${luser},gid=${lgroup},fmask=0337,dmask=0267
    opts_iso9660=${opts_common},ro,iocharset=iso8859-1,utf8,uid=${luser},gid=${lgroup},mode=0440,dmode=0510
    opts_udf=${opts_common},ro,iocharset=iso8859-1,uid=${luser},gid=${lgroup},umask=0337
    opts_ext2=${opts_common},acl,user_xattr
    opts_auto=${opts_vfat}

    # Checking whether device is in fstab (except root fs), or is mounted
    DEVLINKS=" ${DEVLINKS}"
    fstab_check() {
        if [ -n "${FSTAB_NAME}" ]; then
            echo fstab
        else
            # /proc/mounts contains only device names
            # (no UUID or LABEL, but may contain symlinks)
            local rootdevs=`awk '/^\// { print $1 }' /proc/mounts`
            local mdev

            for mdev in ${rootdevs}; do
                if [ ${mdev} = "${DEVNAME}" -o -z "${DEVLINKS/* ${mdev} */}" ]; then
                    echo mtab
                    return
                fi
            done

            echo none
        fi
    }

    # Nothing to do if the device is handled by fstab
    fscheck=`fstab_check`
    if [ "${fscheck}" = fstab ]; then
        exit
    fi

    # Exit if fs type is available, but is not supported
    if [ -n "${ID_FS_TYPE}" -a -n "${supported/* ${ID_FS_TYPE} */}" ]; then
        exit
    fi

    # Assign volume label if unavailable
    if [ -z "${ID_FS_LABEL}" ]; then
        if [ -n "${ID_MODEL}" ]; then
            ID_FS_LABEL="${ID_VENDOR:+${ID_VENDOR/%/_}}${ID_MODEL}"
        elif [ "${DEVNAME/[0-9]/X}" = /dev/fdX ]; then
            ID_FS_LABEL="floppy${DEVNAME/\/dev\/fd/}"
            ID_FS_LABEL="${ID_FS_LABEL/floppy0/floppy}"
        elif [ "${ID_CDROM}" = 1 ]; then
            ID_FS_LABEL="cdrom"
            if [ "${ID_CDROM_DVD}" = 1 ]; then
                ID_FS_LABEL="dvdrom"
            fi
        elif env | grep -q '^ID_CDROM_MEDIA_CD.*=1$'; then
            ID_FS_LABEL=unnamed-cd
        elif env | grep -q '^ID_CDROM_MEDIA_DVD.*=1$'; then
            ID_FS_LABEL=unnamed-dvd
        else
            ID_FS_LABEL=unnamed-disk
        fi
    fi

    # Get current autofs devices and keys (space-separated)
    autodevs=`awk '!/^#/ { printf " " substr($3, 2) }' ${mounts}; echo -n ' '`
    autokeys=`awk '!/^#/ && $1 != "" { printf " " $1 }' ${mounts}; echo -n ' '`

    # Fixing volume label in case of collision
    fixlabel() {
        if [ -z "${autokeys/* ${ID_FS_LABEL} */}" ]; then
            local suffix=1

            while [ -z "${autokeys/* ${ID_FS_LABEL}-${suffix} */}" ]; do
                let suffix=suffix+1
            done

            ID_FS_LABEL="${ID_FS_LABEL}-${suffix}"
        fi
    }

    # Reloading autofs if it is running
    reload_autofs() {
        local actual
        local expected

        if [ -e ${started} ]; then
            # Sends SIGHUP to automount (autofs 5.0.4: only effective when adding mount points)
            ${daemon} reload

            # Wait up to 2s for changes to take effect
            local count=0
            expected=`echo "${autokeys}" | sed 's/^ //; s/ $//' | tr ' ' '\n' | sort`
            while [ ${count} -lt 8 ]; do
                actual=`find ${prefix} -mindepth 1 -maxdepth 1 -type d | sed "s:^${prefix}/::" | sort`

                if [ "${actual}" = "${expected}" ]; then
                    count=100
                else
                    sleep 0.25
                    let count=count+1
                fi
            done

            # Changes weren't reflected in /mnt/media
            if [ ${count} != 100 ]; then
                logger -p 4 -t auto.media "autofs reloading failed, not restarting service"
                # Deadlock if the lock is still held at this point
                # Race condition + infinite loop if lock is not held, when ACTION=change
                # flock -u ${lockfd}
                # ${daemon} restart
            fi
        fi
    }

    # Adding new auto.media entry
    # (also update autokeys for reload_autofs)
    add_entry() {
        # Fallback, shouldn't happen
        local type="tmpfs,${opts_common}"

        case "${ID_FS_TYPE}" in
            auto|ext2|vfat|iso9660|udf)
                eval type=${ID_FS_TYPE},\${opts_${ID_FS_TYPE}}
                ;;
            ext3|ext4)
                type="ext2,${opts_ext2},ro"
                ;;
            msdos)
                type="vfat,${opts_vfat}"
                ;;
            ntfs)
                type="${ID_FS_TYPE}-3g,${opts_ntfs}"

                # Possibly make mount point read-only for NTFS (e.g., hibernated Windows)
                if ! ntfs-3g.probe -w "${DEVNAME}"; then
                    ID_FS_LABEL="${ID_FS_LABEL}-readonly"
                    type="${ID_FS_TYPE}-3g,${opts_ntfs_ro}"
                fi
                ;;
        esac

        fixlabel
        echo "${ID_FS_LABEL} -fstype=${type} :${DEVNAME}" >> ${mounts}
        autokeys="${autokeys}${ID_FS_LABEL} "
    }

    # Unmount and remove existing auto.media entry (or entries, if NTFS)
    # (also update autokeys for fixlabel after ACTION=change, and for reload_autofs)
    remove_entry() {
        # Unmount mount points, not devices (since there can be several per device)
        local keys=`awk '!/^#/ && $3 == ":'"${DEVNAME}"'" { print $1 }' ${mounts}`
        local key

        for key in ${keys}; do
            umount -l ${prefix}/${key} 2>/dev/null || true
            autokeys="${autokeys/ ${key} / }"
        done

        # Remove entries (will be removed from dir after autofs reload)
        sed -i "\& :${DEVNAME}"'$&d' ${mounts}
    }

    # For "add" action, a line is added only for non-existing (in autofs or mounted) device
    if [ "${ACTION}" = add ]; then
        if [ -n "${autodevs/* ${DEVNAME} */}" -a "${fscheck}" != mtab ]; then
            # Generate fs type for static floppy/cd directories
            if [ "${DEVNAME/[0-9]/X}" = /dev/fdX ]; then
                ID_FS_TYPE=auto
            elif [ "${ID_CDROM}" = 1 ]; then
                ID_FS_TYPE=iso9660
            fi

            # Add an entry only if fs type is available
            if [ -n "${ID_FS_TYPE}" ]; then
                add_entry
                reload_autofs
            fi
        fi
    # For "change" action, a line is replaced
    elif [ "${ACTION}" = change ]; then
        if [ -z "${autodevs/* ${DEVNAME} */}" ]; then
            remove_entry
            updated_autofs=1
        fi

        if [ -n "${ID_FS_TYPE}" ]; then
            # Add an entry only if not still mounted
            fscheck=`fstab_check`
            if [ "${fscheck}" != mtab ]; then
                add_entry
                updated_autofs=1
            fi
        fi

        if [ "${updated_autofs}" = 1 ]; then
            reload_autofs
        fi
    # For "remove" action, the line corresponding to the device is removed
    elif [ "${ACTION}" = remove ]; then
        if [ -z "${autodevs/* ${DEVNAME} */}" ]; then
            remove_entry
            reload_autofs
        fi
    fi
# Fork in order not to stall udev on this and related devices
else
    if [ ! -f ${lock} ]; then
        umsave=`umask`
        umask 077
        touch ${lock}
        umask ${umsave}
    fi

    # Bash doesn't understand ${lockfd}<
    (flock ${lockfd} && "$0" fork "$@") 20< ${lock} &
fi
