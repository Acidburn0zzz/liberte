#!/bin/sh -e

export LC_ALL=C


sinfo() {
    echo ${BASH:+-e} "\033[1;33;41m$@\033[0m"
}


# Must have root directory as an argument
if [ -z "$1"  -o  \( -n "$2" -a "$2" != fresh -a "$2" != copy -a "$2" != clean \) ]; then
    echo "$0 <livecd root> [fresh|copy|clean]"
    exit 1
fi


# Variables
FROM=`dirname $0`
LIVECD=$1

MIRROR=http://mirrors.kernel.org/gentoo
stage3base=${MIRROR}/releases/x86/autobuilds
portage=${MIRROR}/snapshots/portage-latest.tar.bz2

# Don't rely on the HKP outbounding port being open
gpg_wwwserver='https://zimmermann.mayfirst.org/pks/lookup?op=get&search=0x${fpr}'
gpg_keys=`sed '/^#/d; /^$/d; s/ //g' ${FROM}/conf/pubkeys`

mfpl=https://support.mayfirst.org/raw-attachment/wiki/mfpl_certificate_authority/mfpl.crt


# Copying and pruning
if [ "$2" = copy ]; then
    sinfo "Copying ${LIVECD}/src to ${LIVECD}/copy"
    rsync -aHAXS -x -i --delete-excluded               \
        --include-from=${FROM}/conf/rootfs.includes    \
        --exclude-from=${FROM}/conf/rootfs-cp.excludes \
        ${LIVECD}/src/ ${LIVECD}/copy | head -n 20

    sinfo "Done."
    exit
elif [ "$2" = clean ]; then
    sinfo "Pruning ${LIVECD}/copy"
    rsync -aHAXS -x -i --delete-excluded               \
        --include-from=${FROM}/conf/rootfs.includes    \
        --exclude-from=${FROM}/conf/rootfs.excludes    \
        --exclude-from=${FROM}/conf/rootfs-cp.excludes \
        ${LIVECD}/copy/ ${LIVECD}/copy | head


    sinfo "Removing unnecessary SUID bits"
    chmod a-s `sed -n "s:^/:${LIVECD}/copy&:p" ${FROM}/conf/rootfs.nosuid`


    ${FROM}/check ${LIVECD}


    sinfo "Creating pruned packages list"
    pakdir=${LIVECD}/copy/tmp/transient/pkg
    for p in ${pakdir}/*=*; do
        sort ${p} | while read f; do
            if [ -h ${LIVECD}/copy"${f}"  -o  -e ${LIVECD}/copy"${f}" ]; then
                echo "${f}" >> ${p}.pruned
            fi
        done

        if [ -e ${p}.pruned ]; then
            mv ${p}.pruned ${p}
            chmod 644 ${p}
        else
            rm ${p}
        fi
    done

    find ${pakdir} -type f -name '*=*' -printf '%f\n' \
        | tr = / | sort > ${LIVECD}/copy/boot/packages.lst
    chmod 644 ${LIVECD}/copy/boot/packages.lst

    # Skip files with spaces to prevents problems with SquashFS sorting
    sinfo "Creating unregistered files list"
    find ${LIVECD}/copy -xdev \( -type l -o -type f \) ! -name '* *'            \
        ! -path "${pakdir}/*" ! -path "${LIVECD}/copy/boot/*" \
        ! -path "${LIVECD}/copy/dev/*" | sed "s:^${LIVECD}/copy::" | sort       \
        > ${pakdir}/all-files
    cat ${pakdir}/*=* | sort -u > ${pakdir}/listed-files

    comm -13  ${pakdir}/listed-files ${pakdir}/all-files > ${pakdir}/unlisted-files
    rm        ${pakdir}/listed-files ${pakdir}/all-files
    chmod 644                                              ${pakdir}/unlisted-files


    sinfo "Done."
    exit
fi


# Extract stage3 + portage snapshot to fresh directory
if [ "$2" = fresh  -o  ! -d ${LIVECD}/src ]; then
    # Download stage3 + portage snapshot
    mkdir -p ${LIVECD}/mirror/stage3 ${LIVECD}/mirror/portage ${LIVECD}/mirror/keys
    mkdir -p -m 700 ${LIVECD}/mirror/gnupg

    # latest-stage3.txt contains YYYYMMDD/stage3-i686-YYYYMMDD.tar.bz2
    sinfo "Fetching latest-stage3.txt"
    wget -N -nv -P ${LIVECD}/mirror/stage3 ${stage3base}/latest-stage3.txt
    stage3=`grep stage3-i686 ${LIVECD}/mirror/stage3/latest-stage3.txt`
    stage3file=`basename ${stage3}`

    # If a new stage3 is available, remove old mirrors
    if [ ! -e ${LIVECD}/mirror/stage3/${stage3file} ]; then
        rm -f ${LIVECD}/mirror/stage3/stage3-i686-*.tar.bz2*
    fi


    sinfo "Downloading ${stage3file}"
    wget -N -nv -P ${LIVECD}/mirror/stage3 ${stage3base}/${stage3}.DIGESTS.asc \
        ${stage3base}/${stage3}.CONTENTS ${stage3base}/${stage3}

    sinfo "Downloading portage-latest.tar.bz2"
    wget -N -nv -P ${LIVECD}/mirror/portage ${portage}.gpgsig ${portage}


    sinfo "Downloading HKPS CA certificate"
    wget -N -q  -P ${LIVECD}/mirror/keys --no-check-certificate ${mfpl}
    wget -N -nv -P ${LIVECD}/mirror/keys --ca-certificate=${LIVECD}/mirror/keys/mfpl.crt \
        ${mfpl}.jamie.asc ${mfpl}.dkg.asc


    sinfo "Fetching PGP public keys and verifying fingerprints"
    for key in ${gpg_keys}; do
        org=`echo ${key} | cut -d: -f1`
        fpr=`echo ${key} | cut -d: -f2`
        keyid=`echo -n ${fpr} | tail -c 8`

        if [ ! -e ${LIVECD}/mirror/keys/${org}-${keyid}.asc ]; then
            eval wget -nv --ca-certificate=${LIVECD}/mirror/keys/mfpl.crt \
                -O ${LIVECD}/mirror/keys/${org}-${keyid}.asc \"${gpg_wwwserver}\"
        fi

        if type gpg 1>/dev/null 2>&1; then
            gpg -q --homedir ${LIVECD}/mirror/gnupg --import ${LIVECD}/mirror/keys/${org}-${keyid}.asc

            fpr2=`gpg -q --homedir ${LIVECD}/mirror/gnupg --fingerprint --with-colons 0x${fpr} | grep '^fpr:' | cut -d: -f 10`
            if [ ${fpr} != "${fpr2}" ]; then
                echo "Fingerprint mismatch: [${fpr}] != [${fpr2}]"
                exit 1
            fi
        else
            sinfo "*** No GnuPG, skipping fingerprint verification: ${org}-${keyid}"
        fi
    done


    if type gpg 1>/dev/null 2>&1; then
        sinfo "Verifying stage3 and portage PGP signatures"
        gpg -q --homedir ${LIVECD}/mirror/gnupg --trust-model always \
            --verify ${LIVECD}/mirror/stage3/${stage3file}.DIGESTS.asc
        gpg -q --homedir ${LIVECD}/mirror/gnupg --trust-model always        \
            --verify ${LIVECD}/mirror/portage/portage-latest.tar.bz2.gpgsig \
                     ${LIVECD}/mirror/portage/portage-latest.tar.bz2


        sinfo "Verifying HKPS CA certificate"
        gpg -q --homedir ${LIVECD}/mirror/gnupg --trust-model always \
            --verify ${LIVECD}/mirror/keys/mfpl.crt.jamie.asc        \
                     ${LIVECD}/mirror/keys/mfpl.crt
        gpg -q --homedir ${LIVECD}/mirror/gnupg --trust-model always \
            --verify ${LIVECD}/mirror/keys/mfpl.crt.dkg.asc          \
                     ${LIVECD}/mirror/keys/mfpl.crt
    else
        sinfo "*** No GnuPG, skipping stage3, portage and HKPS CA certificate verification"
    fi


    sinfo "Verifying stage3 MD5 and SHA1 digests"
    (cd ${LIVECD}/mirror/stage3; md5sum  --quiet -c ${stage3file}.DIGESTS.asc)
    (cd ${LIVECD}/mirror/stage3; sha1sum --quiet -c ${stage3file}.DIGESTS.asc)


    if tar --version | grep -q '(GNU tar)'; then
        sinfo "Verifying stage3 files list"
        LC_ALL=C tar --utc -tjvf ${LIVECD}/mirror/stage3/${stage3file} > ${LIVECD}/mirror/stage3/${stage3file}.CONTENTS.actual
        cmp -s ${LIVECD}/mirror/stage3/${stage3file}.CONTENTS \
               ${LIVECD}/mirror/stage3/${stage3file}.CONTENTS.actual
    else
        sinfo "*** No GNU tar, skipping stage3 files list verification"
    fi


	sinfo "Removing ${LIVECD}/src"
    rm -rf --one-file-system ${LIVECD}/src
    mkdir -m 755 ${LIVECD}/src


    sinfo "Extracting stage3 to ${LIVECD}/src"
    tar -xpSjf ${LIVECD}/mirror/stage3/${stage3file} -C ${LIVECD}/src --exclude './dev/*'

    touch ${LIVECD}/src/dev/null   ${LIVECD}/src/dev/ptmx \
          ${LIVECD}/src/dev/random ${LIVECD}/src/dev/urandom
    ln -s /proc/self/fd ${LIVECD}/src/dev/
    mkdir ${LIVECD}/src/dev/pts    ${LIVECD}/src/dev/.udev
    mknod -m 600 ${LIVECD}/src/dev/initctl p


    sinfo "Extracting portage to ${LIVECD}/src/usr"
    tar -xpSjf ${LIVECD}/mirror/portage/portage-latest.tar.bz2 -C ${LIVECD}/src/usr

    uidgid=`grep '^portage:' ${LIVECD}/src/etc/passwd | cut -d: -f3,4`
    mkdir -m 2775   ${LIVECD}/src/usr/portage/distfiles
    chown ${uidgid} ${LIVECD}/src/usr/portage/distfiles
else
    sinfo "Skipping overwrite of ${LIVECD}/src (use \"fresh\")"
fi


sinfo "Done."
