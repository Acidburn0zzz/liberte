#!/bin/sh -e

sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}


# Must have root directory as an argument
if [ -z "$1"  -o  \( -n "$2" -a "$2" != fresh -a "$2" != copy -a "$2" != clean -a "$2" != semiclean \) ]; then
    echo "$0 <livecd root> [fresh|copy|clean|semiclean]"
    exit 1
fi


# Variables
FROM=`dirname $0`
LIVECD=$1

MIRROR=http://distro.ibiblio.org/pub/linux/distributions/gentoo
#MIRROR=http://mirror.switch.ch/ftp/mirror/gentoo
stage3base=${MIRROR}/releases/x86/autobuilds
portage=${MIRROR}/snapshots/portage-latest.tar.bz2

gpg_wwwserver='http://wwwkeys.eu.pgp.net/pks/lookup?op=get&search=0x${key}'
gpg_keys=`sed '/^#/d; /^$/d; s/ //g' ${FROM}/pubkeys`


# Copying and pruning
if [ "$2" = copy ]; then
    sinfo "Copying ${LIVECD}/src to ${LIVECD}/copy"
    rsync -aHAXS -x -i --delete-excluded \
        --exclude="/usr/portage/distfiles/**" \
        ${LIVECD}/src/ ${LIVECD}/copy | head -n 20

    sinfo "Done."
    exit
elif [ "$2" = clean ]; then
    sinfo "Pruning ${LIVECD}/copy"
    rsync -aHAXS -x -i --delete-excluded \
        --include-from=${FROM}/rootfs.includes \
        --exclude-from=${FROM}/rootfs.excludes \
        ${LIVECD}/copy/ ${LIVECD}/copy | head

    ${FROM}/check ${LIVECD}

    sinfo "Done."
    exit
elif [ "$2" = semiclean ]; then
    sinfo "Shortcut-pruning ${LIVECD}/src to ${LIVECD}/copy"
    rsync -aHAXS -x -i --delete-excluded \
        --include-from=${FROM}/rootfs.includes \
        --exclude-from=${FROM}/rootfs.excludes \
        ${LIVECD}/src/ ${LIVECD}/copy | head

    ${FROM}/check ${LIVECD}

    sinfo "Done."
    exit
fi


# Extract stage3 + portage snapshot to fresh directory
if [ "$2" = fresh  -o  ! -d ${LIVECD}/src ]; then
    # Download stage3 + portage snapshot
    mkdir -p ${LIVECD}/mirror


    # latest-stage3.txt contains YYYYMMDD/stage3-i686-YYYYMMDD.tar.bz2
    sinfo "Saving ${LIVECD}/mirror/latest-stage3.txt"
    wget -N -nv -P ${LIVECD}/mirror ${stage3base}/latest-stage3.txt
    stage3=`grep stage3-i686 ${LIVECD}/mirror/latest-stage3.txt | sed s@stage3-i686@hardened/stage3-i686-hardened@`
    stage3file=`basename ${stage3}`

    # If a new stage3 is available, remove old mirrors
    if [ ! -e ${LIVECD}/mirror/${stage3file} ]; then
        rm -f ${LIVECD}/mirror/stage3-i686-hardened-*.tar.bz2{,.CONTENTS{,.actual},.DIGESTS.asc}
    fi


    sinfo "Saving ${LIVECD}/mirror/${stage3file}"
    wget -N -nv -P ${LIVECD}/mirror ${stage3base}/${stage3}{.DIGESTS.asc,.CONTENTS,}

    sinfo "Saving ${LIVECD}/mirror/portage-latest.tar.bz2"
    wget -N -nv -P ${LIVECD}/mirror ${portage}{.gpgsig,}


    if which gpg 1>/dev/null 2>&1; then
        sinfo "Fetching GPG public keys and verifying fingerprints"
        # gpg fails if it can't create a lock file near the keyring, so using
        #  --no-default-keyring --keyring ${FROM}/pubring.gpg is problematic
        mkdir -p -m 700 ${LIVECD}/mirror/gnupg

        # Don't rely on the HKP outbounding port being open
        for key in ${gpg_keys}; do
            if [ ! -e ${LIVECD}/mirror/${key}.asc ]; then
                eval wget -nv -O ${LIVECD}/mirror/${key}.asc \"${gpg_wwwserver}\"
            fi
            gpg -q --homedir ${LIVECD}/mirror/gnupg --import ${LIVECD}/mirror/${key}.asc
            gpg -q --homedir ${LIVECD}/mirror/gnupg --fingerprint 0x${key} 1>/dev/null
        done


        sinfo "Verifying GPG signatures"
        gpg -q --homedir ${LIVECD}/mirror/gnupg --trust-model always \
            --verify ${LIVECD}/mirror/${stage3file}.DIGESTS.asc
        gpg -q --homedir ${LIVECD}/mirror/gnupg --trust-model always \
            --verify ${LIVECD}/mirror/portage-latest.tar.bz2{.gpgsig,}
    else
        sinfo "GPG not found, skipping signatures verification"
    fi


    sinfo "Verifying stage3 MD5 and SHA1 digests"
    (cd ${LIVECD}/mirror; md5sum  --quiet -c ${stage3file}.DIGESTS.asc)
    (cd ${LIVECD}/mirror; sha1sum --quiet -c ${stage3file}.DIGESTS.asc)


    sinfo "Verifying stage3 files list"
    tar --utc -tjvf ${LIVECD}/mirror/${stage3file} > ${LIVECD}/mirror/${stage3file}.CONTENTS.actual
    cmp -s ${LIVECD}/mirror/${stage3file}.CONTENTS{,.actual}


	sinfo "Deleting ${LIVECD}/src"
    rm -rf --one-file-system ${LIVECD}/src
    mkdir -m 755 ${LIVECD}/src


    sinfo "Extracting stage3 to ${LIVECD}/src"
    tar -xpSjf ${LIVECD}/mirror/${stage3file} -C ${LIVECD}/src --exclude ./dev
    mkdir -m 755 ${LIVECD}/src/dev
    mknod -m 600 ${LIVECD}/src/dev/null    c 1 3
    mknod -m 600 ${LIVECD}/src/dev/tty1    c 4 1
    mknod -m 200 ${LIVECD}/src/dev/console c 5 1


    sinfo "Extracting portage to ${LIVECD}/src/usr"
    tar -xpSjf ${LIVECD}/mirror/portage-latest.tar.bz2 -C ${LIVECD}/src/usr

    mkdir -m 2775 ${LIVECD}/src/usr/portage/distfiles
    chown 250:250 ${LIVECD}/src/usr/portage/distfiles
else
    sinfo "Skipping overwrite of ${LIVECD}/src (use \"fresh\")"
fi


sinfo "Done."
